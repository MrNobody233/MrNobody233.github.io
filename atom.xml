<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrNobody&#39;s Blog</title>
  
  <subtitle>保持呼吸 不要断气</subtitle>
  <link href="http://mrnobody233.github.io/atom.xml" rel="self"/>
  
  <link href="http://mrnobody233.github.io/"/>
  <updated>2022-05-05T03:41:09.780Z</updated>
  <id>http://mrnobody233.github.io/</id>
  
  <author>
    <name>Mr_Nobody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3-常用CompositionAPi</title>
    <link href="http://mrnobody233.github.io/2022/05/03/Vue3-%E5%B8%B8%E7%94%A8CompositionAPi/"/>
    <id>http://mrnobody233.github.io/2022/05/03/Vue3-%E5%B8%B8%E7%94%A8CompositionAPi/</id>
    <published>2022-05-03T13:38:41.000Z</published>
    <updated>2022-05-05T03:41:09.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ol><li>vue3中的一个新的配置项，值为一个函数</li><li>组件中所用到的：数据，方法等等，均要配置在 setup 中</li><li>setup 函数的两种返回值：<ul><li>若返回一个对象，则对象中的属性，方法，在模板中均可以直接使用。</li><li>若返回一个渲染函数：则可以自定义渲染内容</li></ul></li></ol><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><ul><li>作用：定义一个响应式的数据</li><li>语法: <code>const name = ref('zs')</code><ul><li>创建一个包含响应式数据的<span style="color:#cb6c55">引用对象（reference对象 简称ref对象）</span></li><li>js中操作数据：<code>name.value</code></li><li>模板中读取数据： 不需要.value, 直接<code>&lt;div&gt;{{ name }}&lt;/div&gt;</code><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  &lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：{{ name }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄：{{ age }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>工作种类：{{ job.type }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>工资：{{ job.money }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeInfo"</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 导入ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> {ref} <span class="keyword">from</span> <span class="string">'vue'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">"App"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">'zs'</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> job = <span class="title function_">ref</span>({</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="string">'前端'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">money</span>: <span class="number">3000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      name.<span class="property">value</span> = <span class="string">'ls'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      age.<span class="property">value</span> = <span class="number">48</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      job.<span class="property">value</span>.<span class="property">type</span> = <span class="string">'后端'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      job.<span class="property">value</span>.<span class="property">money</span> = <span class="number">4000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      name,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      age,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changeInfo,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      job</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive 函数"></a>reactive 函数</h3><ul><li>作用：定义一个<span style="color:#cb6c55">对象类型</span>的响应数据(基本类型不要用它，要用<code>ref</code>函数)</li><li>语法：<code>const person = reactive({ name:'zs', age:18 })</code>,接收一个对象 (或者数组)返回一个<span style="color:#cb6c55">代理对象(proxy对象)</span></li><li>reactive 定义的响应式数据是 “深层次的”</li><li>内部基于ES6的Proxy实现，通过代理对象操作对象内部数据进行操作</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：{{ person.name }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄：{{ person.age }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>工作种类：{{ person.job.type }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>工资：{{ person.job.money }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>爱好：{{ person.hobby }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeInfo"</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> {reactive} <span class="keyword">from</span> <span class="string">'vue'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">"App"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>({</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">'zs'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">job</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">'前端'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">money</span>: <span class="number">3000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">hobby</span>: [<span class="string">'抽烟'</span>, <span class="string">'喝酒'</span>, <span class="string">'烫头'</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person.<span class="property">age</span> = <span class="number">48</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person.<span class="property">job</span>.<span class="property">type</span> = <span class="string">'后端'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person.<span class="property">job</span>.<span class="property">money</span> = <span class="number">4000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">'放屁'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>, person.<span class="property">job</span>.<span class="property">type</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changeInfo,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="reactive-对比-ref"><a href="#reactive-对比-ref" class="headerlink" title="reactive 对比 ref"></a>reactive 对比 ref</h3><ul><li>从定义数据角度对比：<ul><li>ref 用来定义： <span style="color:#cb6c55">基本类型数据</span></li><li>reactive 用来定义 <span style="color:#cb6c55">对象(或数组) 类型数据</span></li><li>备注： ref 也可以用来定义<span style="color:#cb6c55">对象(或数组) 类型数据</span>，它内部会通过<code>reactive</code>转为<span style="color:#cb6c55">代理对象</span></li></ul></li><li>从使用角度对比<ul><li>ref 定义数据：操作数据需要<code>.value</code>,读取数据时模板中直接读取,不需要<code>.value</code></li><li>reactive 定义数据：操作数据与读取数据：均不需要 <code>.value</code></li></ul></li></ul><h3 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h3><h4 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h4><ul><li>与Vue2中computed配置功能一致</li><li>写法<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  姓：&lt;input type=<span class="string">"text"</span> name=<span class="string">""</span> id=<span class="string">""</span> v-model=<span class="string">"person.firstName"</span>&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  名：&lt;input type=<span class="string">"text"</span> name=<span class="string">""</span> v-model=<span class="string">"person.lastName"</span>&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：{{ person.fullName }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  全名：&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"person.fullName"</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> {reactive, computed} <span class="keyword">from</span> <span class="string">"vue"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">"App"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>({</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">firstName</span>: <span class="string">"张"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lastName</span>: <span class="string">"三"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 计算属性--简写形式 (没有考虑计算属性被修改的情况)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">      person.fullName = computed(() =&gt; {</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          return person.firstName + "-" + person.lastName</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        })</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 计算属性--完整写法 (考虑读和写)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person.<span class="property">fullName</span> = <span class="title function_">computed</span>({</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">get</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">"-"</span> + person.<span class="property">lastName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">set</span>(<span class="params">value</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">'-'</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h4><ul><li>与Vue2 watch配置功能一致</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：{{ sum }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'sum++'</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 当前的信息为：{{ msg }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"msg+='!'"</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> {ref, watch} <span class="keyword">from</span> <span class="string">"vue"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">"App"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">'你好吗'</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 情况1： 监视ref所定义的一个响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        watch(sum, (newValue, oldValue) =&gt; {</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">          console.log('sum变了', newValue, oldValue)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        }, {immediate: true, deep: true})</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 情况2： 监视ref所定义的多个响应式数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">watch</span>([sum, msg], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'sum 或 msg 变了'</span>, newValue, oldValue)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }, {<span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span>})</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      sum,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      msg</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="watchEffect-函数"><a href="#watchEffect-函数" class="headerlink" title="watchEffect 函数"></a>watchEffect 函数</h3><ul><li>不用指明监视哪个属性，监视的回调中用到哪个属性，就监视哪个属性</li><li>类似computed：<ul><li>computed注重计算出的值（回调函数的返回值），所以必须要写返回值</li><li>watchEffect更注重的是过程 （回调函数的函数体），所以不用写返回值</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchEffect 所指定的回调中用到的数据只要发生变化，就会直接重新执行回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { watchEffect } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">  <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'watchEffect配置的回调执行了'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;vue3中的一个新的配置项，值为一个函数&lt;/li&gt;
&lt;li&gt;组件中所用到的：数据，方法等等，均要配置在 </summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>浅度睡眠</title>
    <link href="http://mrnobody233.github.io/2022/04/25/%E6%B5%85%E5%BA%A6%E7%9D%A1%E7%9C%A0/"/>
    <id>http://mrnobody233.github.io/2022/04/25/%E6%B5%85%E5%BA%A6%E7%9D%A1%E7%9C%A0/</id>
    <published>2022-04-25T15:16:45.000Z</published>
    <updated>2022-04-26T02:03:08.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="羽毛球"><a href="#羽毛球" class="headerlink" title="羽毛球"></a>羽毛球</h3><p>昨天下午和<span style="color:skyblue">ButterflyFish</span>，<span style="color:#ccc">废宅充电器</span>，<span style="color:skyblue">胃病患者</span>，还有<span style="color:pink">果果超甜</span>以及他的室友一起去打室内羽毛球，虽然平均每人六块钱，实际上体验还是非常不错的，就是没有空调。我和<span style="color:skyblue">ButterflyFish</span>一组，一开始对战的是<span style="color:pink">果果超甜</span>和他的室友，<span style="color:skyblue">胃病患者</span>则是和<span style="color:#ccc">充电器</span>一组。太久没有运动果然非常吃力，由于<span style="color:skyblue">ButterflyFish</span>的运动细胞实在是太差了，加上她并不会打羽毛球，所以相当于是我一个人打他们两个人，本来是不打算带<span style="color:skyblue">ButterflyFish</span>一起打的，这样他们就不会认真打，考虑到有个萌新就会有所限制，还好差一个人，果然一起打球还是很开心的，等有时间了天气好了我一定好好教她怎么发球和接球。</p><p>虽然<span style="color:skyblue">ButterflyFish</span>并不会打球，好在我技高一筹，我滴发球实在是太变态了，打的非常阴间，靠着发球得分我和<span style="color:skyblue">ButterflyFish</span>击败了他们两个，接下来是<span style="color:skyblue">胃病患者</span>和<span style="color:#ccc">充电器</span>，因为我的体力不支，很快便败下阵来。实在是太虚了！！还没几下就不行了，不过这也不能完全怪我（试图安慰自己），连续好几早上六点起来做核酸八点钟又要上课，因为睡眠不足才导致的体力下降，就是酱紫！要不是因为没蓝了，不然我就开始暴打<span style="color:skyblue">胃病患者</span>，脚踢<span style="color:#ccc">废宅充电器</span>。结束之后我和<span style="color:pink">果果超甜</span>一起回他宿舍洗澡，因为我寝室的热水器坏了呜呜呜，厕所有灯的感觉真滴太好了，不知道我们寝室什么时候会把热水器修好。</p><h3 id="浅度睡眠"><a href="#浅度睡眠" class="headerlink" title="浅度睡眠"></a>浅度睡眠</h3><p>因为太累了所以今天的睡眠质量非常高，能感觉到浑身充满了力量，已经很久没有这么有精神过了，所以我做完核酸后睡到十点半就去工作室了，哈哈哈哈。我的睡眠质量实在是太垃圾啦，基本上每天都是浅睡，关于为什么这样其实我心里还是有点b数的，首先是手机，玩着玩着就忘记了时间，接着是睡眠环境，只要有一点风吹草动我就睡不着，更何况寝室还有一个打呼噜的室友，最重要的是<span style="color:red">胡思乱想</span>，哪来那么多东西给我想，每天都要睡觉，每天都要胡思乱想。上到国家政治大事，下到身边琐事。我想的东西跨度有点大，打个比方吧。</p><p>比如我想着学校解封以后去吃牛蛙，然后联想到疫情，接着联想到国家如何防控疫情，然后是国外想要与新冠病毒共存，只要它一直共存，我们这里就永远不会清零，奶奶滴，实在是太可恶了。我玩瘟疫公司都打不过人类，他们实在是太团结了，只要有一个国家做好解药就会用飞机运送到各个国家，相互帮助。然而现实是不一样，游戏中国家没有勾心斗角，现实会有，然后联想到这个sb游戏在一些版本中把我们国家地图缺少一部分，少了台湾和香港，并且把蒙古国给合并在中国。然后思维跳跃，直接回到幼儿园，回想起我妈妈给我做炸香蕉吃，太好吃了，用面粉包裹，然后粘上白糖，人间美味啊，然后是小学大晚上和我堂妹跑到隔壁财经大学看别人放孔明灯，结果玩太晚了回去被我婶婶给骂了，骂了以后给我和堂妹一人一瓶泡在热水里的旺仔牛奶，可是太久了已经变温了，骂的我和我堂妹畏畏缩缩的去睡觉了。又跳回到现在，原来我上了大学才知道家附近的财经大学是一本，小时候可以随便进出，长大了却进不去，呜呜呜，马上就要大三了，结果专升本还是得考本校，而且还可能考不上，那我考不上可以提前去打工吗，这样我就可以提前赚小钱，本来暑假可以去舅舅公司实习的，可是疫情又严重了被困在学校里快逼疯了。大部分学校的学生居然因为疫情不能出校而通过跳广场舞来解闷，那学校里面有疫情怎么办，只是有时候会看到保安骑着电动车叫没有戴口罩的学生带好口罩而已，看到保安我又想起上学期纳新的时候我们社团的帐篷被别人偷走了，然后去保卫处调监控，写笔录，我和<span style="color:skyblue">胃病患者</span>一起去的，结果是那一条路居然没有监控，我真滴服了，因为没有监控他们也懒得帮我们找，后来才看见被某社团替换了他们坏掉的帐篷，丢在了后面，真滴太恶心了。</p><p>就是这样每天胡思乱想，从一件事联想到另一件事，没完没了才导致我的体质降低，影响我的学习，健康，寿命，通过昨天打羽毛球我才发现好像并不是我睡不着，而是我不够累，看来我得每天和<span style="color:pink">果果超甜</span>一起去跑跑步，这样我就可以睡好觉了，也许吧，，，想我这样的人应该去写小说，可惜我的文笔实在是太垃了，写博客用的都是大白话。得多去看看书，不然人家用高级语言骂我都不知道，正好我被<span style="color:#ccc">充电器</span>推荐买了《一九八四》《我们》《美丽新世界》，因为是上海的出版社，所以我付款后到现在还没有发货，这些好像都不是问题，因为<span style="color:skyblue">ButterflyFish</span>的《仿生人会梦见电子羊吗？》我还没有看完，这就是我唯一担心的问题，我能不能静下心来把一本书看完，实际上是可以的，在20年的暑假我看完了《麦田里的守望者》所以我相信我还是能够把那些书看完滴，嘿嘿，就这样吧平板打字太累了，掰掰。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;羽毛球&quot;&gt;&lt;a href=&quot;#羽毛球&quot; class=&quot;headerlink&quot; title=&quot;羽毛球&quot;&gt;&lt;/a&gt;羽毛球&lt;/h3&gt;&lt;p&gt;昨天下午和&lt;span style=&quot;color:skyblue&quot;&gt;ButterflyFish&lt;/span&gt;，&lt;span style=</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="智障" scheme="http://mrnobody233.github.io/tags/%E6%99%BA%E9%9A%9C/"/>
    
    <category term="自言自语" scheme="http://mrnobody233.github.io/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"/>
    
    <category term="周记" scheme="http://mrnobody233.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>axios拦截器</title>
    <link href="http://mrnobody233.github.io/2022/04/24/axios%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://mrnobody233.github.io/2022/04/24/axios%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2022-04-24T12:45:28.000Z</published>
    <updated>2022-04-24T13:46:58.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><span style="color:red">拦截器</span> (英文：interceptors) 会在<span style="color:red">每次发起ajax请求</span> 和<span style="color:red">得到响应</span> 的时候自动被触发</p><p>应用场景：</p><ul><li>Token 身份认证</li><li>Loading 效果</li><li>etc…</li></ul><h3 id="配置请求拦截器"><a href="#配置请求拦截器" class="headerlink" title="配置请求拦截器"></a>配置<span style="color:red">请求拦截器</span></h3><p>通过 <span style="color:skyblue">axios</span><span style="color:red">.interceptors.request</span> <span style="color:skyblue">.use</span>( <span style="color:red">成功的回调</span>，失败的回调) 可以配置请求拦截器，其中失败的回调函数可以被省略！</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>{</span><br><span class="line"> <span class="comment">// 一定要 return config 固定写法</span></span><br><span class="line"> <span class="keyword">return</span> config;</span><br><span class="line"></span><br><span class="line">},<span class="function">(<span class="params">error</span>)=&gt;</span>{</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="请求拦截器-Token-认证"><a href="#请求拦截器-Token-认证" class="headerlink" title="请求拦截器-Token 认证"></a>请求拦截器-<span style="color:red">Token 认证</span></h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.设置请求的根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">'http://127.0.0.1:8888/api/private/v1/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// 为当前请求配置 Token 认证字段</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorzation</span> = <span class="string">'bear xxx'</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把包挂载到vue的原型对象上</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br></pre></td></tr></tbody></table></figure><h3 id="展示-Loading-效果"><a href="#展示-Loading-效果" class="headerlink" title="展示 Loading 效果"></a>展示 Loading 效果</h3><p>借助 element ui 提供的 Loading 效果组件 可以方便的实现Loading效果展示</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.按需导入Loading效果组件</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Loading</span> } <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.声明变量，用来存储 Loading 组件的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loadingInstance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  配置请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">// 调用 Loading 组件的 service() 方法,创建 Loading 组件的实例，并全屏展示 loading 效果</span></span><br><span class="line">    loadingInstance = <span class="title class_">Loading</span>.<span class="title function_">service</span>({<span class="attr">fullscreen</span>: <span class="literal">true</span>})</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="配置响应拦截器"><a href="#配置响应拦截器" class="headerlink" title="配置响应拦截器"></a>配置<span style="color:red">响应拦截器</span></h3><p>通过 <span style="color:skyblue">axios</span><span style="color:red">.interceptors.response</span> <span style="color:skyblue">.use</span>( <span style="color:red">成功的回调</span>，失败的回调) 可以配置响应拦截器，失败的回调函数依旧可以被省略。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>{</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">},<span class="function">(<span class="params">error</span>)=&gt;</span>{</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="响应拦截器-关闭Loading效果"><a href="#响应拦截器-关闭Loading效果" class="headerlink" title="响应拦截器 - 关闭Loading效果"></a>响应拦截器 - <span style="color:red">关闭Loading效果</span></h3><p>调用 Loading 实例提供的 close() 方法即可关闭 Loading效果</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 关闭loading</span></span><br><span class="line">    loadingInstance.<span class="title function_">close</span>()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;拦截器&quot;&gt;&lt;a href=&quot;#拦截器&quot; class=&quot;headerlink&quot; title=&quot;拦截器&quot;&gt;&lt;/a&gt;拦截器&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;拦截器&lt;/span&gt; (英文：interceptors) 会在&lt;span style</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Ajax" scheme="http://mrnobody233.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>第一次拆机</title>
    <link href="http://mrnobody233.github.io/2022/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8B%86%E6%9C%BA/"/>
    <id>http://mrnobody233.github.io/2022/04/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8B%86%E6%9C%BA/</id>
    <published>2022-04-23T15:30:17.000Z</published>
    <updated>2022-04-23T16:15:44.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="周记"><a href="#周记" class="headerlink" title="周记"></a>周记</h3><p>创建了一个新的标签 叫做周记 和日记差不多，不过是换成了一周一次，又或者是好几周一次，所以取名为周记，</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>昨天<span style="color:#ccc">充电器</span>把<span style="color:#a33038">apex</span>传给我了，安装好以后确实能玩，把所有配置降到最低以后还是卡的一批，<span style="color:#ccc">充电器</span>检查后找到了一些原因，就是我的电脑太辣鸡啦，除了写代码一无是处，还有一些原因是我的电脑买了快两年了，散热器积灰了，风都出不来了，从而导致的帧数降低，为了让我更好的使用这台 华为 matebook13 2020 办公本，来玩 <span style="color:#a33038">apex</span> 和 <span style="color:#edb94d">CSGO</span> 带<span style="color:#ccc">充电器</span> 上大分，他今天中午带了螺丝刀准备帮我拆机清理灰尘，说实话我还是非常担心的。</p><h3 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h3><p>在19年的时候我也尝试过自己拆机，不过拆的是我的手机，我心爱的 小米mix2s 因为它打游戏的续航能力实在是太垃圾了啦，玩两局吃鸡就基本没电了，所以我买了它的4500毫安的电池，准备给它换一个新的心脏。经历了九九八十一难，我终于把它的后盖打开了，一切都准备就绪，可是我弄错了一根线，以为它是电源线，实际上它是前置摄像头的线，用力一拔下后，断了。。。当时我心都凉了一大截，在一瞬间我买什么手机都想好了，后来长按开机后才发现是前置摄像头，吓屎我了，差点就要换手机了。嘿嘿，虽然不能拍我的美照了，但是游戏续航提升了一大截，缺点就是充电慢了许多。</p><h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><p>经历了那件事后，我对拆机有了一些莫名的恐惧感，生怕拆断一根线，但是现在是<span style="color:#ccc">充电器</span>来帮我拆，即使是这样我还是会非常担心滴，毕竟我没有更多的钱买新的电脑了。在拆完外面六个螺丝之后，准备打开后盖，我差点要暴力拆开后壳了，还好<span style="color:#ccc">充电器</span>叫我看一下拆机视频，结果发现垫子底下居然藏了四个螺丝，妈的差点外壳就要报废了。所以需要回到我宿舍使用吹风机把垫子里面的胶吹化掉然后拿下来。回宿舍期间我给<span style="color:#ccc">充电器</span>买了个 1.5￥ 的冰棒作为报酬。拆完垫子之后回到工作室，终于看到了我心爱的电脑的内脏，长这样子。</p><img src="https://raw.githubusercontent.com/MrNobody233/Pohot/main/blog/MyComputer.jpg" width="200/"><p>可见灰尘还是蛮多的，接下来就看<span style="color:#ccc">充电器</span>的操作了，不愧是老手，在拆机之前居然双手摸桌子下的铁柱子，来释放人体电流，防止电脑触电烧机，实在是太高级了！在他的努力下，我的电脑居然安然无恙，正常开机了，而且还抹了散热硅胶，本来想 <del>狠狠敲诈</del>  好好报答他的，没有机会了 嘿嘿。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>后面就是打开<span style="color:#a33038">apex</span>测试了一下，太棒了，稳定40帧，偶尔上60，俗话说：<span style="color:red">1帧能玩 2帧流畅 3帧电竞</span>,我的宝贝本子居然上40帧，简直就是神机啊。测试了几局以后还开出了两个<span style="color:#f5de16">金箱子</span>，<span style="color:purple">紫箱子</span>，不愧是宝藏本子，还给我带来好运，真滴太棒啦，唯一的缺点就是风扇声更大了，仿佛回到了我和它刚见面的模样，当时它也是转的很大声，经历了这一次拆机过程以后，我学会啦！！ 就是不要自己拆机，买个冰棒给<span style="color:#ccc">充电器</span>让他帮我拆就行了</p><p>就这样，掰掰！期待夏天买新散热硅脂再次拆机.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;周记&quot;&gt;&lt;a href=&quot;#周记&quot; class=&quot;headerlink&quot; title=&quot;周记&quot;&gt;&lt;/a&gt;周记&lt;/h3&gt;&lt;p&gt;创建了一个新的标签 叫做周记 和日记差不多，不过是换成了一周一次，又或者是好几周一次，所以取名为周记，&lt;/p&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="周记" scheme="http://mrnobody233.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://mrnobody233.github.io/2022/04/23/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://mrnobody233.github.io/2022/04/23/flex%E5%B8%83%E5%B1%80/</id>
    <published>2022-04-23T08:18:52.000Z</published>
    <updated>2022-04-23T15:24:03.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局原理"><a href="#flex布局原理" class="headerlink" title="flex布局原理"></a>flex布局原理</h2><p>flex 是flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。</p><ul><li>当我们为父盒子设为flex布局以后，子元素的 <span style="color:red">float</span>,<span style="color:red">cleat</span>和<span style="color:red">vertical-align</span>属性将失效。</li><li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 = flex布局</li></ul><p><span style="color:red">总结来说就是通过给父盒子添加flex属性，来控制子盒子的位置和排序方式</span></p><hr><h2 id="常见父项属性"><a href="#常见父项属性" class="headerlink" title="常见父项属性"></a>常见父项属性</h2><p>以下有6个属性是对父元素设置的</p><ul><li>flex-direction: 设置主轴的方向</li><li>justify-content: 设置主轴上的子元素排序方式</li><li>flex-wrap: 设置子元素是否换行</li><li>align-content: 设置侧轴的子元素的排序方式(多行)</li><li>align-items: 设置侧轴上的子元素排序方式 (单行)</li><li>flex-flow: 复合属性，相当于同时设置了 flex-direction 和 flex-warp</li></ul><h3 id="flex-direction-设置主轴的方向"><a href="#flex-direction-设置主轴的方向" class="headerlink" title="flex-direction 设置主轴的方向"></a><span style="color:red">flex-direction</span> 设置主轴的方向</h3><h4 id="主轴与侧轴"><a href="#主轴与侧轴" class="headerlink" title="主轴与侧轴"></a>主轴与侧轴</h4><p>在 flex 布局中，是分为主轴和侧轴两个方向的，同样的叫法有：行和列，x 轴 和 y 轴</p><ul><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴是方向是 y 轴方向，水平向下</li></ul><h4 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h4><p>flex-direction 属性决定主轴的方向 (即项目的排列方向)<br>注意：主轴的侧轴是会变化的，就看flex-direction 设置谁为主轴，剩下的就是侧轴，而子元素是跟着主轴来排序的</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><span style="color:red">row</span></td><td><span style="color:red">默认值从左到右</span></td></tr><tr><td>row-reverse</td><td>从右到左边</td></tr><tr><td><span style="color:red">column</span></td><td><span style="color:red">从上到下</span></td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><h3 id="justify-content-设置主轴上的子元素排列方式"><a href="#justify-content-设置主轴上的子元素排列方式" class="headerlink" title="justify-content 设置主轴上的子元素排列方式"></a><span style="color:red">justify-content</span> 设置主轴上的子元素排列方式</h3><p>justify-content 属性定义了项目在主轴上的对齐方式</p><p><span style="color:red">注意：使用这个属性之前一定要确定好主轴是哪个</span> </p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><span style="color:red">flex-start</span></td><td><span style="color:red">默认值 从头部开始 如果主轴是x轴，则从左到啊啊有</span></td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td><span style="color:red">center</span></td><td><span style="color:red">在主轴居中对齐(如果主轴是x轴则水平居中)</span></td></tr><tr><td><span style="color:red">space-around</span></td><td><span style="color:red">平均剩余空间</span></td></tr><tr><td><span style="color:red">space-between</span></td><td><span style="color:red">先两边贴边 再平分剩余空间</span></td></tr></tbody></table><h3 id="flex-wrap-设置子元素是否换行"><a href="#flex-wrap-设置子元素是否换行" class="headerlink" title="flex-wrap 设置子元素是否换行"></a><span style="color:red">flex-wrap</span> 设置子元素是否换行</h3><p>默认情况下，项目都排在一条线上(又称 “轴线”)，flex-wrap属性定义，flex布局中默认是不换行的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值，不换行</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><h3 id="align-items-设置侧轴上的子元素排序方式-单行"><a href="#align-items-设置侧轴上的子元素排序方式-单行" class="headerlink" title="align-items 设置侧轴上的子元素排序方式 (单行)"></a><span style="color:red">align-items</span> 设置侧轴上的子元素排序方式 (单行)</h3><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td><span style="color:red">center</span></td><td><span style="color:red">挤在一起居中(垂直居中)</span></td></tr><tr><td><span style="color:red">stretch</span></td><td><span style="color:red">拉伸</span></td></tr></tbody></table><h3 id="align-content-设置侧轴上的子元素排序方式-多行"><a href="#align-content-设置侧轴上的子元素排序方式-多行" class="headerlink" title="align-content 设置侧轴上的子元素排序方式 (多行)"></a><span style="color:red">align-content</span> 设置侧轴上的子元素排序方式 (多行)</h3><p>设置子项在侧轴上的排列方式并且只能用于子项出现 <span style="color:red">换行</span>，在单行下是没有效果的</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值在侧轴的头部开始排列</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td><span style="color:red">space-around</span></td><td><span style="color:red">子项在侧轴平分剩余空间</span></td></tr><tr><td><span style="color:red">space-between</span></td><td>子项在侧轴先分布在两头，在平分剩余空间</td></tr><tr><td><span style="color:red">stretch</span></td><td><span style="color:red">设置子项元素高度平分父元素高度</span></td></tr><tr><td>stretch</td><td>设置子项元素高度平分元素高度</td></tr></tbody></table><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flows 是flex-direction 和 flex-wrap 的复合属性</p><hr><h2 id="常见子属性"><a href="#常见子属性" class="headerlink" title="常见子属性"></a>常见子属性</h2><ul><li>flex 子项目占的份数</li><li>align-self 控制子项自己在侧轴的排列方式</li><li>order属性自定义子项的排列顺序</li></ul><h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><p>flex属性定义子项目分配剩余空间，用flex来表示占多少<span style="color:red">份数</span> </p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>{</span><br><span class="line">  <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="align-self-控制子项自己在侧轴的排列方式"><a href="#align-self-控制子项自己在侧轴的排列方式" class="headerlink" title="align-self 控制子项自己在侧轴的排列方式"></a><span style="color:red">align-self</span> 控制子项自己在侧轴的排列方式</h3><p>align-self 属性允许单个项目与其他项目不一样的对齐方式，可覆盖 align-item 属性 默认值为 auto ，表示继承父元素的 align-items 属性 ，如果没有父元素，则等同于 stretch</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.big</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) {</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="order-属性定义项目的排列顺序"><a href="#order-属性定义项目的排列顺序" class="headerlink" title="order 属性定义项目的排列顺序"></a><span style="color:red">order</span> 属性定义项目的排列顺序</h3><p>数值越小 排列越靠前 默认为 0</p><p>与z-index不同</p><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>经典学了忘记，现在写博客里就可以看看啦，要不是 <a href="https://charxd.netlify.app/">充电器</a> 说要卷我 我可能要很久才会 复习 flex 布局 0.0 为了感谢他 我明天和他打羽毛球要干爆他。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flex布局原理&quot;&gt;&lt;a href=&quot;#flex布局原理&quot; class=&quot;headerlink&quot; title=&quot;flex布局原理&quot;&gt;&lt;/a&gt;flex布局原理&lt;/h2&gt;&lt;p&gt;flex 是flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://mrnobody233.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-电商管理知识总结</title>
    <link href="http://mrnobody233.github.io/2022/04/21/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%94%B5%E5%95%86%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://mrnobody233.github.io/2022/04/21/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-%E7%94%B5%E5%95%86%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-21T10:32:51.000Z</published>
    <updated>2022-04-26T04:03:33.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用阿里图标"><a href="#使用阿里图标" class="headerlink" title="使用阿里图标"></a>使用阿里图标</h3><ol><li>把下载好的font文件放进 assets 目录下</li><li>在 main.js 中导入字体图标  <code>import './assets/fonts/iconfont.css'</code></li><li>复制类名即可 <code>   &lt;el-input prefix-icon="iconfont icon-3702mima"&gt;&lt;/el-input&gt;</code>  <span style="color:red">iconfont是固定写法 </span></li></ol><h3 id="vue2中全局配置axios"><a href="#vue2中全局配置axios" class="headerlink" title="vue2中全局配置axios"></a>vue2中全局配置axios</h3><ol><li>在 main.js 中导入 axios<br><code>import axios from "axios"; </code></li><li>设置请求的根路径<br><code>axios.defaults.baseURL = 'http://127.0.0.1:8888/api/private/v1/'</code></li><li>把包挂载到 vue 的原型对象上<br><code>Vue.prototype.$http = axios</code></li><li>通过 this 就可以访问原型上的 $http发起axios请求<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">login</span>(<span class="params"></span>) {</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loginFormRef</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> value =&gt; {</span><br><span class="line">     <span class="keyword">if</span> (value === <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">'login'</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   })</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><hr></li></ol><h3 id="登录成功后保存-token"><a href="#登录成功后保存-token" class="headerlink" title="登录成功后保存 token"></a>登录成功后保存 token</h3><ol><li>将 token 保存在 sessionStorage 中<br><code>window.sessionStorage.setItem('token', res.data.token);</code></li><li>通过编程式导航跳转到主页<br><code>this.$router.push('/home')</code></li><li>路由导航守卫控制访问权限<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, form, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">'/login'</span>) <span class="keyword">return</span> <span class="title function_">next</span>()</span><br><span class="line">    <span class="comment">// 获取token</span></span><br><span class="line">    <span class="keyword">const</span> tokenStr = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">    <span class="comment">// 如果 token 是空值，则返回login页面</span></span><br><span class="line">    <span class="keyword">if</span> (!tokenStr) <span class="keyword">return</span> <span class="title function_">next</span>(<span class="string">'/login'</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><ol><li>清空token<br><code>window.sessionStorage.clear()</code></li><li>跳转到登录页面<br><code>this.$router.push('/login')</code></li></ol><hr><h3 id="通过axios请求拦截器添加token"><a href="#通过axios请求拦截器添加token" class="headerlink" title="通过axios请求拦截器添加token"></a>通过axios请求拦截器添加token</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios 请求拦截</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>( <span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 为请求头对象，添加 Token 验证的 Authorization</span></span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">} )</span><br></pre></td></tr></tbody></table></figure><p>如果不通过拦截器添加token是这样写的~~ 果然学了拦截器后方便了很多呐</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取菜单列表数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getMenuList</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">token</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">  <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">'menus'</span>, {<span class="attr">headers</span>: {<span class="string">'Authorization'</span>: <span class="variable language_">this</span>.<span class="property">token</span>}})</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用阿里图标&quot;&gt;&lt;a href=&quot;#使用阿里图标&quot; class=&quot;headerlink&quot; title=&quot;使用阿里图标&quot;&gt;&lt;/a&gt;使用阿里图标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;把下载好的font文件放进 assets 目录下&lt;/li&gt;
&lt;li&gt;在 main.js 中导入字</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
    <category term="axios" scheme="http://mrnobody233.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="http://mrnobody233.github.io/2022/04/19/axios/"/>
    <id>http://mrnobody233.github.io/2022/04/19/axios/</id>
    <published>2022-04-19T03:09:31.000Z</published>
    <updated>2022-04-21T08:13:19.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="axios-是什么东东"><a href="#axios-是什么东东" class="headerlink" title="axios 是什么东东"></a>axios 是什么东东</h3><p>Axios 是专注于<span style="color:red">网络数据请求</span>的库</p><p>相比原生的XMLHttpRequest对象 ， axios <span style="color:red">简单易用</span></p><p>相比jquery，axios更加<span style="color:red">轻量化</span>，只专注于网络数据请求</p><hr><h3 id="axios发起GET请求"><a href="#axios发起GET请求" class="headerlink" title="axios发起GET请求"></a>axios发起GET请求</h3><p>axios 发起 get 请求的语法：</p><p><code>axios.get('url', { params:{ 参数 } }).then(callback)</code></p><p>具体请求实例如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 请求的URL地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'http://www.liulongbin.top:3006/api/get'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求的参数对象</span></span><br><span class="line"><span class="keyword">const</span> paramsObj = {<span class="attr">name</span>: <span class="string">'zs'</span>, <span class="attr">age</span>: <span class="number">20</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 axios.get() 发起 GET 请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(url, {<span class="attr">params</span>: paramsObj}).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="comment">// res.data 才是服务器返回的数据</span></span><br><span class="line">  <span class="keyword">let</span> result = res.<span class="property">data</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="axios发起POST请求"><a href="#axios发起POST请求" class="headerlink" title="axios发起POST请求"></a>axios发起POST请求</h3><p><code>axios.post('url',{ 参数 }).then( callback )</code></p><p>具体请求实例如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 请求的url地址</span></span><br><span class="line"><span class="keyword">const</span> postUrl = <span class="string">'http://www.liulongbin.top:3006/api/post'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  要提交到服务器的数据</span></span><br><span class="line"><span class="keyword">const</span> dataObj = {<span class="attr">location</span>: <span class="string">'北京'</span>, <span class="attr">address</span>: <span class="string">'顺义'</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用axios.post() 发起POST请求</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(postUrl, dataObj).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line"><span class="comment">// res.data 才是服务器发送的数据</span></span><br><span class="line">  <span class="keyword">let</span> result = res.<span class="property">data</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="直接使用axios发起请求"><a href="#直接使用axios发起请求" class="headerlink" title="直接使用axios发起请求"></a>直接使用axios发起请求</h3><p>asiox 也提供了类似jQuery中 $.ajax()的函数，语法如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>({</span><br><span class="line">  <span class="attr">method</span>: <span class="string">' 请求类型 '</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">' 请求的URL地址 '</span>,</span><br><span class="line">  <span class="attr">data</span>: { post数据 }</span><br><span class="line">  <span class="attr">params</span>: { <span class="variable constant_">GET</span>参数 }</span><br><span class="line">}).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></tbody></table></figure><h4 id="直接使用axios发起GET请求"><a href="#直接使用axios发起GET请求" class="headerlink" title="直接使用axios发起GET请求"></a>直接使用axios发起GET请求</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>({</span><br><span class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">'http://www.liulongbin.top:3006/api/get'</span>,</span><br><span class="line">  <span class="attr">params</span>: {  <span class="comment">// GET 参数要通过 params 属性提供</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">'zs'</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">  }</span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="直接使用axios发起POST请求"><a href="#直接使用axios发起POST请求" class="headerlink" title="直接使用axios发起POST请求"></a>直接使用axios发起POST请求</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>({</span><br><span class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">'http://www.liulongbin.top:3006/api/post'</span>,</span><br><span class="line">  <span class="attr">data</span>: {  <span class="comment">// POST 数据要通过 data 属性提供</span></span><br><span class="line">    <span class="attr">location</span>: <span class="string">'北京'</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">'顺义'</span></span><br><span class="line">  }</span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="结合-async-和-await-来使用axios"><a href="#结合-async-和-await-来使用axios" class="headerlink" title="结合 async 和 await 来使用axios"></a>结合 async 和 await 来使用axios</h3><ol><li>调用 axios 之后 可以使用 async/await进行简化</li><li>使用解构赋值，从axios封装的大对象中，把 data 属性解构出来</li><li>把结构出来的 data属性，使用 冒号 进行重命名，一般都重命名为 { data : res }</li></ol><p>  可以使用<span style="color:red">结构赋值</span></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">btnGet</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> <span class="title function_">axios</span>({</span><br><span class="line">      <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">'http://www.liulongbin.top:3006/api/get'</span>,</span><br><span class="line">      <span class="attr">params</span>: {  <span class="comment">// GET 参数要通过 params 属性提供</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">'zs'</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;axios-是什么东东&quot;&gt;&lt;a href=&quot;#axios-是什么东东&quot; class=&quot;headerlink&quot; title=&quot;axios 是什么东东&quot;&gt;&lt;/a&gt;axios 是什么东东&lt;/h3&gt;&lt;p&gt;Axios 是专注于&lt;span style=&quot;color:red&quot;&gt;</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Ajax" scheme="http://mrnobody233.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>凌晨校园</title>
    <link href="http://mrnobody233.github.io/2022/04/18/%E5%87%8C%E6%99%A8%E6%A0%A1%E5%9B%AD/"/>
    <id>http://mrnobody233.github.io/2022/04/18/%E5%87%8C%E6%99%A8%E6%A0%A1%E5%9B%AD/</id>
    <published>2022-04-17T16:06:15.000Z</published>
    <updated>2022-04-18T13:31:48.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h3><p>本来想在工作室过夜写会儿代码的，但是在十一点四十的时候<span style="color:pink">果果超甜</span>突然告诉我明天早上要做核酸，TNND，我真的受不了了，明明今天已经做过了，居然连续做两天，所以我准备回宿舍，不过红绿蓝并不是只有我一个人，还有一个老师也在，整个地方只有他的办公室还是亮着的，为了不让他发现我在这里，我小心的打开自己办公室的门，然后悄咪咪的溜到大门口，这个真的是高难度，因为大门太重了，开的时候会发出嘎吱嘎吱的响声，我也经常在办公室听大门的开关声来判断是否有人进来。所以结局很正常，我被他发现了，关键是我打都没打开门，因为门被锁了，而且还是磁力锁，我来这里三个学期了都没有看到他们打开磁力，今天TMD突然就打开了，然后老师就说了一句 谁？  把我尬死在原地，我故作镇定，回答：还能出去吗？ 然后他说待会走。</p><p>然后我就默默的回到自己的办公室打开小灯开始看自己的代码，尬的我连刚刚学的Vuex传值都不会了，加上我尿急，我都快绷不住了，过了好一会儿他来了，说 走吧 ，问我为什么这么晚还没回宿舍，我说项目还有一些需要改的地方，他也没多问，出去的时候我才知道，磁力门并不是那个老师弄的，他也尝试拉了一下门，和我一样打不开，我按了一下右边的按钮就开了，接着就在外面等他锁门，拿手电筒照着他，看他锁门，尬死我了，心里想赶紧让我先走吧，然后他就让我先回去了，哎，还好他没问我这么晚了怎么回宿舍，不然我真的答不出来。<br>    宿舍离工作室也不算很远，不过路上还是特别可怕的，第一个是太黑了一点灯都没有，第二个是太冷了，第三个就是妈的那个<span style="color:red">SB</span>孔雀突然叫了一下，把我吓得鸡皮疙瘩都起来了，搞不明白为什么孔雀要放在我宿舍对面，现在住在这栋宿舍的人每天都在群里想着怎么杀掉这几个孔雀。<br>    终于到了老地方，那颗支撑我回宿舍的小树，看来多锻炼还是特别有用的，对于我来说通过这个树上二楼是一件非常轻松的事情，也许是我太轻了，手臂能够把我支撑起来，就这样我安全都回去了。</p><h3 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h3><p>实际上这并不是我第一次这么晚还在学校外面溜达，在几号来着。。也就前几天吧，因为一些原因，<span style="color:pink">果果超甜</span>，<span style="color:skyblue">胃痛患者</span>，还有我很晚的时候在外面溜达，本来想着等老师走了以后再回工作室的，在外面溜达了好一会儿，终于来学校这么久了找到古茗的位置了，还有我去年暑假留校做比赛经常点的外卖的位置，那个炸鸡真的太好吃了，还看见了我们学校的留学生在操场用音响放音乐，如果不是封校了，我们肯定会出去溜达的，真的可惜呀，，</p><p>过了好一会我们准备回工作室了，结果发现二楼大门被锁了。。通常是一楼被锁的，我们可以从食堂小门进去，但是二楼被锁了实在就无能为力了。期间尝试了很多方法进去，结果也就我能实现，可以从厕所那里爬过去，也就爬两个小房间的高度，然后抓着钢管到男厕所窗口就可以了，我示范了一遍给他们看，但是到钢管哪里我就没爬了，太黑了，为了安全考虑我和他们一起回宿舍了，还是熟悉的位置，我第一个爬上去了，能感觉到树枝被裁剪了许多，相比之前爬难了一点点点点，但是对于他们来说就特别困难了，努力了半天，他们终于也上来了，看得我心惊胆跳的，真是捏了一把汗，如果失误了从上面摔下来，也就一条腿骨折而已，如果没站稳脑袋磕到石头了也就一辈子躺床上罢了。安全的回到了宿舍，可是 胃痛患者 并不想回自己宿舍，因为和室友关系不好什么的，所以我善心大方收留了他 ，也就是这个决定，让我尬死了一晚上</p><p>那个时候太热了，又热又闷的，我想去开空调，但是空调线没插，我想过去插线，可是那边室友已经睡着了，所以结局很明了，我把线插好了，也把室友吵醒了被骂了一顿，可以说是我今年最尬的时候了，那晚过的很煎熬，果然我还是比较适合一个人睡，如果<span style="color:#ccc">废宅充电器</span>在的话就好了，他可以一晚上不睡，然后让<span style="color:skyblue">胃痛患者</span>睡他床，不过想想也不可能，因为不知道他们宿舍怎么上二楼，不过我以后再也不会让别人和我一起挤那么小的床睡觉了。拜拜</p><p>这次写的太粗略了，很多细节都没有写，可能是这一篇生活写的太多了，而且现在已经12：48了，明天还得早起做核酸，，等过几年我突然想起来了更多细节，也许会补充上去吧？也许。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二次&quot;&gt;&lt;a href=&quot;#第二次&quot; class=&quot;headerlink&quot; title=&quot;第二次&quot;&gt;&lt;/a&gt;第二次&lt;/h3&gt;&lt;p&gt;本来想在工作室过夜写会儿代码的，但是在十一点四十的时候&lt;span style=&quot;color:pink&quot;&gt;果果超甜&lt;/span&gt;突然告</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="智障" scheme="http://mrnobody233.github.io/tags/%E6%99%BA%E9%9A%9C/"/>
    
  </entry>
  
  <entry>
    <title>Vuex</title>
    <link href="http://mrnobody233.github.io/2022/04/14/Vuex/"/>
    <id>http://mrnobody233.github.io/2022/04/14/Vuex/</id>
    <published>2022-04-14T12:22:26.000Z</published>
    <updated>2022-04-19T04:30:59.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vuex-概述"><a href="#Vuex-概述" class="headerlink" title="Vuex 概述"></a>Vuex 概述</h3><h4 id="组件之间共享数据"><a href="#组件之间共享数据" class="headerlink" title="组件之间共享数据"></a>组件之间共享数据</h4><ol><li>父向子传值：<span style="color:red">v-bind 属性绑定</span></li><li>子向父传值：<span style="color:red">自定义事件</span></li><li>兄弟之间共享数据：<span style="color:red">EventBus</span></li></ol><ul><li>$on 接收数据的那个组件</li><li>$emit 发送数据的那个组件</li></ul><p>以上传值只适合<span style="color:red">小范围</span>，如果需要<span style="color:red">频繁</span>的<span style="color:red">大范围</span>的共享就可使用vuex</p><hr><h4 id="Vuex-是什么"><a href="#Vuex-是什么" class="headerlink" title="Vuex 是什么"></a>Vuex 是什么</h4><p>是实现组件全局状态(数据) 管理的一种机制，可以方便的实现组件之间数据的共享</p><p>使用Vuex统一管理状态的好处</p><ol><li>能够在 vuex 集中管理共享的数据，易于开发和后期维护</li><li>能够高效地实现组件之间的数据共享，提高开发效率</li><li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li></ol><h3 id="Vuex-的基本使用"><a href="#Vuex-的基本使用" class="headerlink" title="Vuex 的基本使用"></a>Vuex 的基本使用</h3><h4 id="1-安装-vuex-依赖包"><a href="#1-安装-vuex-依赖包" class="headerlink" title="1. 安装 vuex 依赖包"></a>1. 安装 vuex 依赖包</h4><p><code>npm i vuex -s</code></p><h4 id="2-导入-vuex-包"><a href="#2-导入-vuex-包" class="headerlink" title="2. 导入 vuex 包"></a>2. 导入 vuex 包</h4><p><code>import Vuex from 'vuex'</code><br><code>Vue.use(Vuex)</code></p><h4 id="3-创建-store-对象、"><a href="#3-创建-store-对象、" class="headerlink" title="3.创建 store 对象、"></a>3.创建 store 对象、</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title function_">store</span>({</span><br><span class="line">  <span class="comment">// state 中存放的就是全局共享的数据</span></span><br><span class="line">  <span class="attr">state</span>:{ <span class="attr">count</span>: <span class="number">0</span> }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="4-将-store-对象挂载到-vue-实例中"><a href="#4-将-store-对象挂载到-vue-实例中" class="headerlink" title="4.将 store 对象挂载到 vue 实例中"></a>4.将 store 对象挂载到 vue 实例中</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">  <span class="attr">el</span>:<span class="string">'#app'</span>,</span><br><span class="line">  <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(app),</span><br><span class="line">  router,</span><br><span class="line">  <span class="comment">// 将创建的共享数据，挂载到Vue实例中</span></span><br><span class="line">  <span class="comment">// 所有的组件，就可以直接从 store 中获取全局的数据了</span></span><br><span class="line">  store</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="vuex的核心概念"><a href="#vuex的核心概念" class="headerlink" title="vuex的核心概念"></a>vuex的核心概念</h3><p>Vuex中的主要核心概念如下：</p><ul><li>State</li><li>Mutation</li><li>Action</li><li>Getter</li></ul><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>state提供位移的公共数据源，所有共享的数据都要统一放到Store的State中进行存储</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建store数据源，提供唯一公共数据</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>({</span><br><span class="line">  <span class="attr">state</span>: { <span class="attr">count</span>: <span class="number">0</span> }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>组件访问State中数据的 <span style="color:red">第一种方式</span>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`this.$store.state.全局数据名称</span></span><br></pre></td></tr></tbody></table></figure><p>组件访问State中数据的 <span style="color:red">第二种方式</span>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.从 vuex 中按需导入mapState函数</span></span><br><span class="line"><span class="keyword">import</span> { mapState } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></tbody></table></figure><p>通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当前组件的computed计算属性</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.将全局数据，映射为当前组件的计算属性</span></span><br><span class="line"><span class="attr">computed</span>:{</span><br><span class="line">  ...<span class="title function_">mapStated</span>([<span class="string">'count'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>Mutation 用于变更 Store 中的数据。</p><ol><li>只能通过 mutation 变更 Store 数据，不可以直接操作 Store 中的数据</li><li>通过这种方式虽然操作起来繁琐一些，但是可以集中监控所有数据的变化</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 Mutation</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title function_">store</span>({</span><br><span class="line">  <span class="attr">state</span>:{</span><br><span class="line">     <span class="attr">count</span>: <span class="number">0</span> </span><br><span class="line">    },</span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state</span>) {</span><br><span class="line">       <span class="comment">// 变更状态</span></span><br><span class="line">        state.<span class="property">count</span>++</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发mutation</span></span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line"><span class="title function_">btnHandler1</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 触发mutation的第一种方式</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">'add'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以在触发mutations时<span style="color:red">传递参数</span></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: {</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state, step</span>) {</span><br><span class="line">        <span class="comment">// 变更状态</span></span><br><span class="line">        state.<span class="property">count</span> += step</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">  <span class="title function_">btnHandler1</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 在调用 commit 函数，</span></span><br><span class="line">    <span class="comment">// 触发mutations 时携带参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">'addN'</span>, <span class="number">3</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>this.$store.commit()</code>是触发mutations的第一种方式，触发mutations的<span style="color:red">第二种方式</span>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 从vuex中按需导入 mapMutations函数</span></span><br><span class="line"><span class="keyword">import</span> { mapMutations } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></tbody></table></figure><p>通过刚才导入的mapMutations函数 将需要的 mutations 函数 映射为当前组件的methods方法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 将指定的mutations函数 映射为当前组件的methods函数</span></span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">   ...<span class="title function_">mapMutations</span>([<span class="string">'sub'</span>, <span class="string">'subN'</span>]),</span><br><span class="line">   </span><br><span class="line">   <span class="title function_">reduction1</span>(<span class="params"></span>) {</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">sub</span>()</span><br><span class="line">   },</span><br><span class="line">   <span class="title function_">reduction2</span>(<span class="params"></span>) {</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">subN</span>(<span class="number">3</span>)</span><br><span class="line">   }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 用于处理异步任务<br>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发mutation的方式间接变更数据。</p><p>定义Action</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有 mutation 中定义的函数，才有权力修改 state 中的数据</span></span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">      <span class="title function_">add</span>(<span class="params">state</span>) {</span><br><span class="line">          <span class="comment">// 不要在 mutations 函数中 执行异步操作</span></span><br><span class="line">          <span class="comment">/*    setTimeout(() =&gt; {</span></span><br><span class="line"><span class="comment">                    state.count++</span></span><br><span class="line"><span class="comment">                },1000)*/</span></span><br><span class="line">          state.<span class="property">count</span>++</span><br><span class="line">      },</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">actions</span>: {</span><br><span class="line">    <span class="title function_">addAsync</span>(<span class="params">context</span>) {</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">// 在 actions 中,不能直接修改 state 中的数据</span></span><br><span class="line">        <span class="comment">// 必须通过 context.commit() 触发 某个 mutation 才行</span></span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">'add'</span>)</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>触发Action</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:{</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params"></span>){</span><br><span class="line">      <span class="comment">// 触发 actions 的第一种方式</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispath</span>(<span class="string">'addAsync'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>触发 actions 异步任务时携带参数:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: {</span><br><span class="line">    <span class="title function_">addN</span>(<span class="params">state, step</span>) {</span><br><span class="line">        <span class="comment">// 变更状态</span></span><br><span class="line">        state.<span class="property">count</span> += step</span><br><span class="line">    },</span><br><span class="line">},</span><br><span class="line"><span class="attr">actions</span>: {</span><br><span class="line">    <span class="title function_">addNAsync</span>(<span class="params">context, step</span>) {</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">'addN'</span>, step)</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnHandlerWaitN</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">'addNAsync'</span>, <span class="number">3</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>this.$store.dispath()</code> 是触发 actions 的第一种方式，触发actions的 <span style="color:red">第二种方式</span>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1. 从vuex中按需导入 mapActions函数</span></span><br><span class="line"><span class="keyword">import</span> { mapActions } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></tbody></table></figure><p>通过刚才导入的mapActions函数，将需要的actions函数，映射为当前组件的methods方法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:{ </span><br><span class="line">  ...<span class="title function_">mapActions</span>([<span class="string">'addAsync'</span>,<span class="string">'addNsync'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>Getter 用于对Store中的数据进行加工处理形成新的数据。</p><ol><li>Getter 可以对Store中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。</li><li>Store中数据发生变化，Getter的数据也会跟着变化。</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>({</span><br><span class="line">    <span class="attr">state</span>: {</span><br><span class="line">        coun</span><br></pre></td></tr></tbody></table></figure><p>使用getters的<span style="color:red">第一种方式</span></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;{{ <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.名称 }}&lt;/h3&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用getters的<span style="color:red">第二种方式</span></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;h1&gt;{{ showNum }}&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { mapGetters} <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">computed</span>: {</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">'showNum'</span>])</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vuex-概述&quot;&gt;&lt;a href=&quot;#Vuex-概述&quot; class=&quot;headerlink&quot; title=&quot;Vuex 概述&quot;&gt;&lt;/a&gt;Vuex 概述&lt;/h3&gt;&lt;h4 id=&quot;组件之间共享数据&quot;&gt;&lt;a href=&quot;#组件之间共享数据&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue计算属性-自定义事件-watch监听器</title>
    <link href="http://mrnobody233.github.io/2022/04/10/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6-watch%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://mrnobody233.github.io/2022/04/10/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6-watch%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2022-04-10T12:11:01.000Z</published>
    <updated>2022-04-13T12:04:21.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性<span style="color:red">本质上</span>就是一个<span style="color:red">function函数</span>,它可以<span style="color:red">实时监听</span>data中数据的变化，并<span style="color:red">return一个计算后的新值</span>，供组件渲染DOM时使用</p><h4 id="声明计算属性"><a href="#声明计算属性" class="headerlink" title="声明计算属性"></a>声明计算属性</h4><p>计算属性需要以<span style="color:red">function函数</span>的形式声明到组件的<span style="color:red">computed节点中</span>，示例代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model.<span class="property">number</span>=<span class="string">"count"</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{count}}乘以 2 的值为：{{ plus }} <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>){</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span>{</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:{</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">plus</span>(<span class="params"></span>){ <span class="comment">// 计算属性，监听 data 中 count 的变化，自动计算出 count * 2 之后的新值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="计算属性的使用注意点"><a href="#计算属性的使用注意点" class="headerlink" title="计算属性的使用注意点"></a>计算属性的<span style="color:red">使用注意点</span></h4><ol><li>计算属性<span style="color:red">必须定义在computed节点中</span></li><li>计算属性<span style="color:red">必须是一个function的函数</span></li><li>计算属性<span style="color:red">必须有 return 返回值！！</span></li><li>计算属性<span style="color:red">必须当作普通属性使用</span></li></ol><h4 id="计算属性-vs-方法"><a href="#计算属性-vs-方法" class="headerlink" title="计算属性 vs 方法"></a>计算属性 vs 方法</h4><p>相对于方法来说，<span style="color:red">计算属性会缓存计算的结果</span>，只有计算属性的<span style="color:red">依赖项发生变化时</span>，才会<span style="color:red">重新进行运算</span>，因此计算属性的性能更好</p><hr><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>在封装组件时，为了让<span style="color:red">组件的使用者</span>可以<span style="color:red">监听到组件内状态的变化</span>，此时需要用到<span style="color:red">组件的自定义事件</span></p><h4 id="自定义事件的3个使用步骤"><a href="#自定义事件的3个使用步骤" class="headerlink" title="自定义事件的3个使用步骤"></a>自定义事件的3个使用步骤</h4><ul><li>在封装组件时</li></ul><h5 id="声明自定义事件"><a href="#声明自定义事件" class="headerlink" title="声明自定义事件"></a><span style="color:red">声明</span>自定义事件</h5><p>开发者为自定义组件封装的<span style="color:red">自定义事件</span>，必须事先在<span style="color:red">emits</span>节点中声明</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>{</span><br><span class="line">  <span class="comment">// 1.声明自定义事件</span></span><br><span class="line">  <span class="attr">emits</span>:[<span class="string">'change'</span>],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="触发自定义事件"><a href="#触发自定义事件" class="headerlink" title="触发自定义事件"></a><span style="color:red">触发</span>自定义事件</h5><p>在<span style="color:red">emits</span>节点下声明的自定义事件，可以通过<span style="color:red">this.$emit</span>(‘自定义事件的名称’)方法进行触发</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值是：{{ count }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span>{</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.声明自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">emits</span>:[<span class="string">'countChange'</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">add</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2.this.$emit() 触发自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">'countChange'</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ul><li>在使用组件时<h5 id="监听自定义事件"><a href="#监听自定义事件" class="headerlink" title="监听自定义事件"></a><span style="color:red">监听</span>自定义事件</h5></li></ul><p>在使用自定义的组件时，可以通过<span style="color:red">v-on</span>的形式<span style="color:red">监听自定义事件</span>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="title class_">Counter</span> @countChange=<span class="string">"getCount"</span>&gt;&lt;/<span class="title class_">Counter</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">  <span class="title function_">getCount</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'触发countChange事件'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="自定义事件传参。"><a href="#自定义事件传参。" class="headerlink" title="自定义事件传参。"></a>自定义事件<span style="color:red">传参</span>。</h4><p>在调用<span style="color:red">this.$emit()</span>方法触发自定义事件时，可以通过<span style="color:red">第二个参数</span>为自定义事件传参</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">'countChange'</span>, <span class="variable language_">this</span>.<span class="property">count</span>) <span class="comment">//  触发自定义事件时，通过第二个参数传参</span></span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line"><span class="comment">// 外界在监听countChange自定义事件时候可以通过事件处理函数的形参拿到最新的 count值</span></span><br><span class="line">  <span class="title function_">getCount</span>(<span class="params">val</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'触发countChange事件,count值为:'</span> + val)</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="watch-监听器"><a href="#watch-监听器" class="headerlink" title="watch 监听器"></a>watch 监听器</h3><p><span style="color:red">watch侦听器</span>允许开发者监视数据的变化，从而<span style="color:red">针对数据的变化做待定的操作</span>。例如监视用户名的变化并发起请求，判断用户是否可用。</p><h4 id="watch侦听器的基本语法"><a href="#watch侦听器的基本语法" class="headerlink" title="watch侦听器的基本语法"></a>watch侦听器的基本语法</h4><p>开发者需要<span style="color:red">在watch节点下</span>，定义自己的侦听器，要监听那个数据项的变化，就把那个数据项的名字作为方法的名称。</p><p> 形参列表中，第一个参数代表 变化后的新值 ，第二个参数是 变化之前的旧值</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="title function_">username</span>(<span class="params">newVal, oldVal</span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'新：'</span> + newVal, <span class="string">'旧：'</span> + oldVal)</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="小案例-检测用户名是否可用"><a href="#小案例-检测用户名是否可用" class="headerlink" title="小案例:检测用户名是否可用"></a>小案例:检测用户名是否可用</h4><p>监听username值的变化，并使用axios发起Ajax请求，检测当前输入的用户名是否可用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="attr">available</span>: <span class="string">' '</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line"><span class="comment">//  侦听器</span></span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">username</span>(<span class="params">newVal, oldVal</span>) {</span><br><span class="line">      <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://www.escook.cn/api/finduser/<span class="subst">${newVal}</span>`</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">available</span> = res.<span class="property">message</span>;</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="immediate选项"><a href="#immediate选项" class="headerlink" title="immediate选项"></a>immediate选项</h4><p>默认情况下，组件在初次加载完毕后不会调用watch侦听器。如果想让watch侦听器<span style="color:red">立即被调用</span>，则需要使用<span style="color:red">immediate</span>选项。</p><p>非常简单 watch节点里加一个<code>immediate:true</code>即可</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">username</span>(<span class="params">newVal, oldVal</span>) {</span><br><span class="line">    <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://www.escook.cn/api/finduser/<span class="subst">${newVal}</span>`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">available</span> = res.<span class="property">message</span>;</span><br><span class="line">    </span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  组件加载完毕后立即调用一次当前的watch侦听器</span></span><br><span class="line">  <span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="deep选项"><a href="#deep选项" class="headerlink" title="deep选项"></a>deep选项</h4><p>当<span style="color:red">watch侦听的是一个对象</span>，如果<span style="color:red">对象中属性值发生了变化</span>，则<span style="color:red">无法被监听到</span>。此时需要使用<span style="color:red">deep选项</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="attr">available</span>: <span class="string">' '</span>,</span><br><span class="line">      <span class="attr">info</span>: {</span><br><span class="line">        <span class="attr">username</span>: <span class="string">'zs'</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="attr">info</span>: {</span><br><span class="line">      <span class="comment">// handler属性是固定写法：当username发生了变化，调用handler</span></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">handle</span>(<span class="params">newVal</span>) {</span><br><span class="line">        <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://www.escook.cn/api/finduser/`</span> + newVal)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">available</span> = res.<span class="property">message</span>;</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="监听对象单个属性的变化"><a href="#监听对象单个属性的变化" class="headerlink" title="监听对象单个属性的变化"></a>监听对象单个属性的变化</h4><p>只想监听info.username的属性变化，可以把这个访问列声明过来即可</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="attr">available</span>: <span class="string">' '</span>,</span><br><span class="line">      <span class="attr">info</span>: {</span><br><span class="line">        <span class="attr">username</span>: <span class="string">'zs'</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">''</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line"><span class="comment">//  侦听器</span></span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="string">'info.username'</span>: { <span class="comment">// 只想监听 info.username属性值的变化</span></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">handle</span>(<span class="params">newVal</span>) {</span><br><span class="line">        <span class="keyword">const</span> {<span class="attr">data</span>: res} = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://www.escook.cn/api/finduser/`</span> + newVal)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">available</span> = res.<span class="property">message</span>;</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h3&gt;&lt;p&gt;计算属性&lt;span style=&quot;color:red&quot;&gt;本质上&lt;/span&gt;就是一个&lt;span style=&quot;color:r</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue数据共享</title>
    <link href="http://mrnobody233.github.io/2022/04/10/Vue%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
    <id>http://mrnobody233.github.io/2022/04/10/Vue%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</id>
    <published>2022-04-10T11:39:29.000Z</published>
    <updated>2022-04-16T10:14:25.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件之间的数据共享"><a href="#组件之间的数据共享" class="headerlink" title="组件之间的数据共享"></a>组件之间的数据共享</h2><h3 id="在项目开发中，组件之间的关系分为如下3种"><a href="#在项目开发中，组件之间的关系分为如下3种" class="headerlink" title="在项目开发中，组件之间的关系分为如下3种"></a>在项目开发中，组件之间的关系分为如下3种</h3><ol><li>父子关系</li><li>兄弟关系</li><li>后代关系</li></ol><hr><h3 id="父子之间的数据共享"><a href="#父子之间的数据共享" class="headerlink" title="父子之间的数据共享"></a>父子之间的数据共享</h3><p>父子组件之间的数据共享又分为</p><h4 id="1-父向子共享数据"><a href="#1-父向子共享数据" class="headerlink" title="1. 父向子共享数据"></a>1. <span style="color:red">父向子</span>共享数据</h4><p>父组件通过<span style="color:red">v-bind属性绑定</span>向子组件共享数据。同时，子组件需要使用<span style="color:red">props</span>接收数据</p><p><span style="color:red">父组件</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;myTest </span><br><span class="line">  :msg=<span class="string">"message"</span></span><br><span class="line">  :user=<span class="string">"userinfo"</span>&gt;</span><br><span class="line">&lt;/myTest&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">  <span class="keyword">return</span>{</span><br><span class="line">    <span class="attr">message</span>:<span class="string">'hello vue'</span>,</span><br><span class="line">    <span class="attr">userinfo</span>:{ <span class="attr">name</span>:<span class="string">'zs'</span>, <span class="attr">age</span>:<span class="number">20</span> }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span style="color:red">子组件</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试父子传值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ userinfo }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">"MyTest"</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">'msg'</span>, <span class="string">'userinfo'</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="2-子向父共享数据"><a href="#2-子向父共享数据" class="headerlink" title="2. 子向父共享数据"></a>2. <span style="color:red">子向父</span>共享数据</h4><p>子组件通过<span style="color:red">自定义事件</span>的方式向父组件共享数据。</p><p>在<span style="color:red">子组件</span>中</p><ul><li>先声明自定义事件 <code>  emits: ['MyTestCount'],</code></li><li>触发自定义事件 <code>   this.$emit('MyTestCount', this.count)</code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="comment">// 1. 声明自定义事件</span></span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">'MyTestCount'</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 2.数据发生变化时，触发自定义事件</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">'MyTestCount'</span>, <span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>在<span style="color:red"> 父组件</span>中</p><ul><li>监听子组件的自定义事件  <code>&lt;test @MyTestCount = 'getTestCount'&gt; &lt;/test&gt;</code></li><li>通过形参接收子组件传递过来的数据</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件--&gt;</span><br><span class="line">  &lt;!--<span class="number">1.</span>监听子组件的自定义事件 @<span class="title class_">MyTestCount</span>--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">MyTest</span> @<span class="attr">MyTestCount</span>=<span class="string">"getMyTestCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">MyTest</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyTest</span> <span class="keyword">from</span> <span class="string">"@/components/MyTest"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: {<span class="title class_">MyTest</span>,},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getMyTestCount</span>(<span class="params">val</span>) { <span class="comment">// 2. 通过形参，接收子组件传递过来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">count</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="3-父与子双向数据同步"><a href="#3-父与子双向数据同步" class="headerlink" title="3. 父与子双向数据同步"></a>3. <span style="color:red">父与子</span>双向数据同步</h4><p>  父组件在使用子组件期间，可以使用<span style="color:red">v-model指令</span>维护组件内外数据的双向同步</p><ol><li>首先父组件通过<span style="color:red">属性绑定</span>的形式，向子组件传递一个<span style="color:red">props</span>数据<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MySon</span> <span class="attr">v-model:num</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">MySon</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li>接下来在子组件接收props并声明<span style="color:red">emits</span>.注意emits需要以<code>'update:要更新谁放谁'</code>形式写出来，这是一个固定写法</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">'num'</span>]</span><br><span class="line"><span class="attr">emits</span>: [<span class="string">'update:num'</span>],</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>接下来可以调用<code>this.$emit('update:xxx',最新的数据)</code> 发送出去即可<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">'update:num'</span>, <span class="variable language_">this</span>.<span class="property">num</span> + <span class="number">1</span>)</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h3 id="兄弟组件之间的数据共享"><a href="#兄弟组件之间的数据共享" class="headerlink" title="兄弟组件之间的数据共享"></a>兄弟组件之间的数据共享</h3><p>兄弟组件之间实现数据共享的方案是<span style="color:red">EventBus</span>，可以接受第三方的包<span style="color:red">mitt</span>来创建<span style="color:red">eventBus对象</span>，从而实现兄弟组件之间的数据共享</p><ol><li>安装mitt 依赖包<br>  <code>npm i mitt</code></li><li>创建公共的<span style="color:red">eventBus</span>模块<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入mitt包</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">'mitt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建EventBus对象</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将EventBus的实例对象共享出去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> but</span><br></pre></td></tr></tbody></table></figure></li><li>在<span style="color:red">数据接收方</span>定义事件<br>  在数据接收方调用<span style="color:red">bus.on</span>(‘事件名’,事件处理函数)方法<span style="color:red">注册一个自定义事件</span></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 导入eventBus.js模块，得到共享的bus对象</span></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">'@/eventBus/eventBus.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"Right"</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">//  调用bus.on()方法注册一个自定义事件，通过事件处理函数的形参接收数据</span></span><br><span class="line">    bus.<span class="title function_">on</span>(<span class="string">'countChange'</span>, <span class="function">(<span class="params">num</span>) =&gt;</span> {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = num</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>在<span style="color:red">数据发送方</span>触发事件</li></ol><p>在数据发送方，调用<span style="color:red">bus.emit</span>(‘事件名称’,要发送的数据)方法<span style="color:red">触发自定义事件</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">"@/eventBus/eventBus.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"Left"</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span>++</span><br><span class="line">      <span class="comment">// 调用bus.emit()方法触发自定义事件，并发送数据</span></span><br><span class="line">      bus.<span class="title function_">emit</span>(<span class="string">'countChange'</span>, <span class="variable language_">this</span>.<span class="property">num</span>)</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件之间的数据共享&quot;&gt;&lt;a href=&quot;#组件之间的数据共享&quot; class=&quot;headerlink&quot; title=&quot;组件之间的数据共享&quot;&gt;&lt;/a&gt;组件之间的数据共享&lt;/h2&gt;&lt;h3 id=&quot;在项目开发中，组件之间的关系分为如下3种&quot;&gt;&lt;a href=&quot;#在项目开发</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由</title>
    <link href="http://mrnobody233.github.io/2022/04/05/Vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://mrnobody233.github.io/2022/04/05/Vue%E8%B7%AF%E7%94%B1/</id>
    <published>2022-04-05T12:14:46.000Z</published>
    <updated>2022-04-21T13:40:54.321Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:red"></span></p><h3 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h3><p>路由就是<span style="color:red">Hash地址</span>与<span style="color:red">组件</span>之间的对应关系</p><h4 id="前端路由的工作方式"><a href="#前端路由的工作方式" class="headerlink" title="前端路由的工作方式"></a>前端路由的工作方式</h4><ol><li>用户<span style="color:red">点击</span>页面上的<span style="color:red">路由连接</span></li><li>导致了<span style="color:red">Url地址栏</span>中<span style="color:red">Hash</span>值发生了变化</li><li>前端路由<span style="color:red">监听到了Hash地址的变化</span></li><li>前端路由把当前<span style="color:red">Hash地址对应的组件</span>渲染到浏览器中</li></ol><p>结论：前端路由，指的是<span style="color:red">Hash 地址</span>与<span style="color:red">组件之间</span>的<span style="color:red">对应关系</span></p><h4 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h4><p><span style="color:red">Vue-router</span>是vue.js官方给出的<span style="color:red">路由解决方案</span>。它只能结合vue项目进行使用，能够轻松的管理SPA项目中组件的切换</p><ul><li>vue-router 3.x 只能结合<span style="color:red">vue2</span>进行使用</li><li>vue-router 4.x 只能结合<span style="color:red">vue3</span>进行使用</li></ul><h4 id="声明路由链接和占位符"><a href="#声明路由链接和占位符" class="headerlink" title="声明路由链接和占位符"></a>声明<span style="color:red">路由链接</span>和<span style="color:red">占位符</span></h4><p>可以使用<code>&lt;router-link&gt;</code>标签来声明路由链接，并使用<code>&lt;router-view&gt;</code>标签来声明路由占位符</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明路由连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/movie"</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="在router-x2F-main-js中导入-并注册组件"><a href="#在router-x2F-main-js中导入-并注册组件" class="headerlink" title="在router/main.js中导入 并注册组件"></a>在router/main.js中导入 并注册组件</h4> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入需要被展示的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">"@/views/Home.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">"@/views/About.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">"@/views/Movie.vue"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// path 是hash地址 component 是要展示的组件</span></span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: <span class="title class_">Home</span>},</span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/about'</span>, <span class="attr">component</span>: <span class="title class_">About</span>},</span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/movie'</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>}</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h4><p>指的是：用户在访问<span style="color:red">地址A</span>的时候，<span style="color:red">强制用户跳转</span>到地址C，从而展示特定的组件页面</p><p>用法十分简单 通过路由规则的 <span style="color:red">redirect</span>属性，指定一个新的路由地址，可以很方便的设置路由的重定向</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line"><span class="comment">// path 表示需要被重定向的“原地址”，redirect表示将要被重定向到的“新地址”</span></span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/home'</span>},</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>通过路由实现<span style="color:red">组件的嵌套展示</span>，叫做嵌套路由</p><ol><li>声明 <span style="color:red">子路由链接和子路由占位符</span></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在About.vue组件中，声明tab1和tab2的子路由连接以及子路由占位符 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明子路由链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about/tab1"</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about/tab2"</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明子路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在父路由规则中，通过 <span style="color:red">children</span>属性 <span style="color:red">嵌套声明</span>子路由规则</li></ol><!-- 在router.js路由模块中，导入需要的组件，并使用children属性声明组路由规则 --><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入需要的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Tab1</span> <span class="keyword">from</span> <span class="string">"@/views/tab/Table1.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Tab2</span> <span class="keyword">from</span> <span class="string">"@/views/tab/Table2.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/about'</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'About'</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">        <span class="comment">// 在嵌套路由中使用路由重定向</span></span><br><span class="line">        <span class="attr">redirect</span>:<span class="string">'/about/tab1'</span>,</span><br><span class="line">        <span class="attr">children</span>: [   <span class="comment">// 通过children属性嵌套子路由规则</span></span><br><span class="line">            {<span class="attr">path</span>: <span class="string">'tab1'</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span>},</span><br><span class="line">            {<span class="attr">path</span>: <span class="string">'tab2'</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span>},</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">！！！注意 子路由规则的path 不要以 / 开头 </span><br><span class="line">这样写是错误的 <span class="attr">children</span>:[{<span class="attr">path</span>:<span class="string">'/tab1'</span>,<span class="attr">component</span>:<span class="title class_">Tab1</span>}]</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="路由的query传参"><a href="#路由的query传参" class="headerlink" title="路由的query传参"></a>路由的query传参</h4><p>  跳转路由并携带query参数 to的字符串写法<br>  </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/home/message/detail?id=${m.id}$title=${m.title}`"</span>&gt;</span>{{m.title}}<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>  跳转路由并携带query参数 to的对象写法</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{</span></span></span><br><span class="line"><span class="string"><span class="tag">    path:'/home/message/detail',</span></span></span><br><span class="line"><span class="string"><span class="tag">    query:{</span></span></span><br><span class="line"><span class="string"><span class="tag">        id:m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">        title:m.title</span></span></span><br><span class="line"><span class="string"><span class="tag">        }</span></span></span><br><span class="line"><span class="string"><span class="tag">}"</span>&gt;</span></span><br><span class="line">  {{m.title}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>  接收参数<br>  </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$.route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></tbody></table></figure><p></p><hr><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>顾名思义 就是给路由取名字 非常简单 直接加一个name就可以了 作用就是可以<span style="color:red">简化路由的跳转</span></p><ul><li><p>使用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="attr">path</span>: <span class="string">'/about'</span>, <span class="attr">component</span>: <span class="title class_">About</span>, <span class="attr">name</span>: <span class="string">'about'</span>},</span><br></pre></td></tr></tbody></table></figure></li><li><p>简化</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简化前 需要写完整路劲 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/demo/test/welcome"</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简化后 直接通过名字跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"{name:'hello'}"</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 检查写法配合传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{</span></span></span><br><span class="line"><span class="string"><span class="tag">  name:'hello',</span></span></span><br><span class="line"><span class="string"><span class="tag">  query{</span></span></span><br><span class="line"><span class="string"><span class="tag">    id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">    title:'欢迎欢迎',</span></span></span><br><span class="line"><span class="string"><span class="tag">  }</span></span></span><br><span class="line"><span class="string"><span class="tag">}"</span>&gt;</span></span><br><span class="line"> 欢迎</span><br><span class="line"> <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><p>指的是把Hash地址中<span style="color:red">可变的部分</span>定义为<span style="color:red">参数项</span>，从而<span style="color:red">提高路由规则的复用性</span>。在vue-router中使用<span style="color:red">英文的冒号:</span>来定义路由的参数项</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/movie/1"</span>&gt;</span>电影1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/movie/2"</span>&gt;</span>电影2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/movie/3"</span>&gt;</span>电影3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></tbody></table></figure><p>路由中的动态参数以 : 进行声明，冒号后面是动态参数的名称</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ <span class="attr">path</span>: <span class="string">'/movie/:id'</span>,<span class="attr">name</span>: <span class="string">'Movie'</span>,<span class="attr">component</span>: <span class="title class_">Movie</span> },</span><br></pre></td></tr></tbody></table></figure><h4 id="获取动态路由参数值的两种方案"><a href="#获取动态路由参数值的两种方案" class="headerlink" title="获取动态路由参数值的两种方案"></a>获取动态路由参数值的两种方案</h4><ol><li><span style="color:red">$route.params</span>参数对象</li></ol><p>通过动态路由匹配的方式渲染出来的组件中，可以使用$route.params对象访问到<span style="color:red">动态匹配的参数值</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"movie"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--$route.params 是路由的“参数对象”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Movie组件---------{{ $route.params.id }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用props接收路由参数</li></ol><p><span style="color:red">为了简化路由参数的获取形式</span>，vue-router允许 <span style="color:red">路由规则中开启props传参</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在movie组件中 以props的形式接收到路由规则匹配到的参数项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法，值为对象，该对象中所有的key-value都会以props的形式传给Movie组件</span></span><br><span class="line">  { <span class="attr">path</span>: <span class="string">'/movie/:id'</span>, <span class="attr">name</span>: <span class="string">'Movie'</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>, <span class="attr">props</span>: {<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">'hello'</span>} },</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法，值为布尔值，如果props的值为true 就会把该路由组件收到的所有params参数，以props的形式传给Movie组件</span></span><br><span class="line">  { <span class="attr">path</span>: <span class="string">'/movie/:id'</span>, <span class="attr">name</span>: <span class="string">'Movie'</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>, <span class="attr">props</span>: <span class="literal">true</span> },</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法，值为函数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>){</span><br><span class="line">  <span class="keyword">return</span> {<span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,<span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在movie组件中使用props接收路由规则中匹配到的参数项</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">'id'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接使用props中接收的路由参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Movie组件----{{id}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p>通过<span style="color:red">调用API</span>实现导航的方式，叫做<span style="color:red">编程式导航</span>，与之对应的，通过<span style="color:red">点击链接</span>实现导航的方式，叫做<span style="color:red">声明式导航</span></p><ul><li>普通网页中点击<span style="color:red">a链接</span>，vue项目中点击<span style="color:red">router-link</span>都属于声明式导航</li><li>普通网页中调用<span style="color:red">location.href</span>跳转到新页面的方式，属于编程式导航</li></ul><h5 id="vue-router中的编程式"><a href="#vue-router中的编程式" class="headerlink" title="vue-router中的编程式"></a>vue-router中的编程式</h5><p>vue-router提供了许多编程式导航API，其中最常用的两个API分别是</p><ol><li>this.$router.push(‘hash地址’)</li></ol><ul><li>跳转到指定hash地址，从而展示对应的组件</li></ul><ol start="2"><li>this.$router.go(数值 n)</li></ol><ul><li>实现导航历史的前进，后退</li></ul><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><p>路由守卫可以<span style="color:red">控制路由的访问权限</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, form, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// to 目标路由对象</span></span><br><span class="line">    <span class="comment">// from 当前导航正要离开的路由对象</span></span><br><span class="line">    <span class="comment">// next 是一个函数 表示放行</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">'/main'</span> &amp;&amp; !token) {</span><br><span class="line">        <span class="comment">// next(false) 不允许跳转</span></span><br><span class="line">        <span class="title function_">next</span>(<span class="string">'/login'</span>) <span class="comment">//强制跳转到“登录页面”</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">// 直接放行， 允许访问“后台主页”</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h4><ol><li>hash模式： <ul><li>地址中永远带着#号 不美观</li><li>若以后将地址通过第三方手机app分享，诺app效验严格，则地址会被标记为不合法。</li><li>兼容性较好</li></ul></li><li>history模式<ul><li>地址干净，美观</li><li>兼容性和hash模式相比略差</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404问题</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;Vue路由&quot;&gt;&lt;a href=&quot;#Vue路由&quot; class=&quot;headerlink&quot; title=&quot;Vue路由&quot;&gt;&lt;/a&gt;Vue路由&lt;/h3&gt;&lt;p&gt;路由就是&lt;span style=&quot;co</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-ref引用-作用域插槽</title>
    <link href="http://mrnobody233.github.io/2022/04/03/Vue-ref%E5%BC%95%E7%94%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/"/>
    <id>http://mrnobody233.github.io/2022/04/03/Vue-ref%E5%BC%95%E7%94%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</id>
    <published>2022-04-03T06:21:20.000Z</published>
    <updated>2022-04-03T12:21:05.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ref引用"><a href="#ref引用" class="headerlink" title="ref引用"></a>ref引用</h3><p>ref用来辅助开发者在<span style="color:red">不依赖jQuery的情况下</span>，获取DOM元素或组件的引用</p><p>每个vue的组件实例上，都包含一个<span style="color:red"><code>$refs</code>对象</span>，里面存储着对应的DOM元素或组件的引用。默认情况下，<span style="color:red">组件的<code>$ref</code>指向一个空对象</span>。</p><h4 id="使用-ref-引用-DOM-元素"><a href="#使用-ref-引用-DOM-元素" class="headerlink" title="使用 ref 引用 DOM 元素"></a>使用 ref 引用 DOM 元素</h4><ul><li><p>使用ref属性 为对应的DOM添加引用名称</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"myh1"</span>&gt;</span>App根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>通过 <code>this.$refs.myh1</code>可以获取到DOM元素的引用</p></li><li><p>操作DOM元素把文本颜色改为红色</p>  <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myh1</span>.<span class="property">style</span>.<span class="property">color</span>=<span class="string">'red'</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="使用-ref-引用-组件-实例"><a href="#使用-ref-引用-组件-实例" class="headerlink" title="使用 ref 引用 组件 实例"></a>使用 ref 引用 组件 实例</h4><ul><li><p>使用ref属性 为相对应的组件添加引用名称</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">ref</span>=<span class="string">"counterRef"</span>&gt;</span><span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>通过 <code>this.$refs.counterRef</code>可以引用组件的实例</p></li><li><p>引用到组件的实例之后，就可以调用组件上的 methods 方法</p>  <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">counterRef</span>.<span class="title function_">reset</span>()</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="this-nextTick-cb-方法"><a href="#this-nextTick-cb-方法" class="headerlink" title="this.$nextTick(cb)方法"></a>this.$nextTick(cb)方法</h4><p>  组件的$nextTick(cb)方法，会把cb回调推迟到下一个DOM更新周期之后执行，大概意思就是，等组件的DOM异步的重新渲染完成后，再执行cb回调函数，从而保证cb回调函数可以操作到最新的DOM元素。</p>  <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>{</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ipt</span>.<span class="title function_">focus</span>()</span><br><span class="line">})  </span><br></pre></td></tr></tbody></table></figure><hr><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p><span style="color:red">插槽(Slot)</span>是vue为<span style="color:red">组件封装者</span>提供的能力。允许开发者在封装组件时，把<span style="color:red">不确定的，希望用户指定的部分</span>定义为插槽。</p><p>可以把插槽认为是组件封装期间，为用户预留的<span style="color:red">内容的占位符</span></p><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p>在封装组件时，可以通过<code>&lt;slot&gt;</code>元素<span style="color:red">定义插槽</span>，从而<span style="color:red">为用户预留内容占位符</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>MyCom组件--基本用法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过slot标签 为用户预留内容占位符(插槽) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>最后一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用户在使用组件期间 为插槽指定具体内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 在使用组件时，为插槽指定具体的内容 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>---用户自定义的内容---<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h4><p>封装组件，可以为预留的<code>&lt;slot&gt;</code>插槽提供<span style="color:red">默认内容</span>。如果组件的使用者没有为插槽提供任何内容，则默认内容会生效</p><p>使用方式特别简单，在标签内写上默认内容即可</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>MyCom组件--基本用法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这是默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>最后一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>如果在封装组件时<span style="color:red">需要预留多个插槽节点</span>，则需要为每个<code>&lt;slot&gt;</code>插槽指定<span style="color:red">具体的 name 名称</span>。这种<span style="color:red">带有具体名称的插槽</span>叫做”具名插槽”</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>MyCom组件--基本用法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在向具名插槽提供内容的时候，我们可以在<code>&lt;template&gt;</code>元素上使用<span style="color:red">v-slot</span>,并以v-slot的参数形式提供其名称</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>鹅鹅鹅<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:user</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> 具名插槽可以简写，(<span style="color:red">v-slot:</span>)替换为字符<span style="color:red">#</span>。例如 <code>v-slot:header</code>可以被重写为<code>#header</code></p><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>在封装组件的过程中，可以为预留的<code>&lt;slot&gt;</code>插槽绑定props数据，这种<span style="color:red">带有props数据的<code>&lt;slot&gt;</code></span>就是作用域插槽</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>MyCom组件--作用域插槽<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">"userInfo"</span> <span class="attr">:msg</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>v-slot:default=”任意合法名” 一般使用scope 接收 接着可以使用插值表达式渲染出来</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCom</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ scope.info.name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyCom</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ref引用&quot;&gt;&lt;a href=&quot;#ref引用&quot; class=&quot;headerlink&quot; title=&quot;ref引用&quot;&gt;&lt;/a&gt;ref引用&lt;/h3&gt;&lt;p&gt;ref用来辅助开发者在&lt;span style=&quot;color:red&quot;&gt;不依赖jQuery的情况下&lt;/span&gt;，获取</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Markor</title>
    <link href="http://mrnobody233.github.io/2022/04/02/Markor/"/>
    <id>http://mrnobody233.github.io/2022/04/02/Markor/</id>
    <published>2022-04-02T03:57:05.000Z</published>
    <updated>2022-04-02T03:57:52.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Markor"><a href="#Markor" class="headerlink" title="Markor"></a>Markor</h3><p>最近想了一小问题，就是学校解封以后，如果我回家的话基本上是不会碰电脑的，虽然我会把电脑一起带回去，但是基本上都没有打开过，可能是我觉得带着有重量感，不对，是害怕我的github没有保持日常提交代码，所以为了避免这个情况，我可以使用平板来写文档，虽然提交不上去，但是回宿舍以后，我也可以躺在床上用平板来写一写自己想写的东西，这样有挺多好处的，可以避免我在床上玩手机，这样就可以玩平板了，哈哈哈哈哈，为什么想要用平板来写文档呢，写博客什么的都不是最主要的，最重要的是让我的平板键盘能有用武之地，我已经太久没有用我的平板键盘了，一直放在抽屉里积灰，这东西花了我600RMB，我也不知道当时我怎么想的，会买这么贵的东西。</p><p>好吧我突然想起来了，在我没有买显示器之前，平板一直是我的副屏，多亏了华为的多屏协同，能帮我省很多事，虽然延迟还是有一小丢丢，但是日常使用还是很给力的，即使是这样还是有缺点的，就是字太小了，我眼睛很好，但是一直看着这么小的字也是会很难受的，所以我买了显示器，果然大屏就是爽，立马抛弃了我的小平板，只用它来记笔记，我们三个一直相处的很好，直到有一天！！！我会写博客了，我为什么不把笔记写在博客里呢，所以我再次抛弃了我的平板，没有考虑平板的感受，呜呜，果然是买前生产力，买后哔哩哔哩，盖泡面，当手托，摸鱼。所以为了改变现状，我可以使用<strong>Markor</strong>来满足自己突然想写博客的欲望，这一篇博客就是使用Markor来写的，还挺像回事，如果找到更好的软件我还是会替代Markor的，哈哈哈哈哈哈，这样我的平板就不会失宠了。</p><p>日常水博客，就酱紫，拜拜。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Markor&quot;&gt;&lt;a href=&quot;#Markor&quot; class=&quot;headerlink&quot; title=&quot;Markor&quot;&gt;&lt;/a&gt;Markor&lt;/h3&gt;&lt;p&gt;最近想了一小问题，就是学校解封以后，如果我回家的话基本上是不会碰电脑的，虽然我会把电脑一起带回去，但是基本上</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="智障" scheme="http://mrnobody233.github.io/tags/%E6%99%BA%E9%9A%9C/"/>
    
    <category term="自言自语" scheme="http://mrnobody233.github.io/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>熬夜之旅</title>
    <link href="http://mrnobody233.github.io/2022/04/01/%E7%86%AC%E5%A4%9C%E4%B9%8B%E6%97%85/"/>
    <id>http://mrnobody233.github.io/2022/04/01/%E7%86%AC%E5%A4%9C%E4%B9%8B%E6%97%85/</id>
    <published>2022-04-01T15:18:55.000Z</published>
    <updated>2022-04-01T16:03:25.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="熬夜之旅"><a href="#熬夜之旅" class="headerlink" title="熬夜之旅"></a>熬夜之旅</h3><p>  今天在工作室度过第一个夜晚，虽然在暑假比赛的时候已经住过另一个工作室了，但是这里还是头一次，和我一起的有<a href="https://charet.github.io/">社恐废宅充电器</a>和<a href="https://thirsty-c.github.io/">胃病患者</a>，比起宿舍我确实更喜欢这里，毕竟这里不需要交<span style="color:red">电费</span>和<span style="color:red">水费</span>，最主要的是还有空调可以吹，虽然室友都有比较好的作息时间，但在其他时间还是比较吵的，串门的比较多，所以非常感谢有这么好的环境提供给我学习和休息，今晚如果没有SB抢我的折叠床，我应该会睡的比较早。</p><h3 id="其他的事"><a href="#其他的事" class="headerlink" title="其他的事"></a>其他的事</h3><p>  凌晨两点半的时候，有一个网友突然发现了我，她问我是谁，毕竟隔了四五年了，不记得我是谁也很正常，所以我稍微和她解释了一下，这样体现了给人写备注的好处。这个姑娘的也挺悲催的，所以我对她印象挺深刻，她和父母关系不好，有自残倾向，到了现在和她聊了一会，她告诉我在今年，也就是她的18岁那天，她<span style="color:red">自杀未遂</span>，但是和父母关系好了一些，她说她重生了，我为她感到高兴，但也不敢问的太仔细，虽然她貌似想向我分享那些事情，但我还是把话题给往其他地方给放了，认识她是在一个仓鼠群里，我以前养过仓鼠，和她聊得比较好所以她加了我，并且告诉我她家里的一些事，当时我并不会安慰人，只是默默听着，让她有一个地方可以宣泄自己的压力，虽然现在也是一样，我还是不会安慰人，能感受的到别人悲伤的情绪，但也不会说什么，还可能会逃避。</p><p>  扯多了，她问我怕蛇吗，我没回答，只是问她现在开始养蛇了嘛，和仓鼠放在一起不会出事吗，以及蛇没有咬过你吗，她说没有，倒是很想被咬一下试试，所以一不小心又回到了自残的话题，说自己又开始抽起了烟，本以为能缓解压力，结果压力更大了，每天晚上睡眠时间只有5小时，离她想上的大学平均分还差2分，也就是每科需要进步十分，我不敢多聊，因为太晚了，已经快凌晨3点了，所以告诉她生活的美好，以及还有很多没有碰到过的有意思的事情之类的，接着就睡了。</p><p>  其实像这样的网友还有很多，以前聊的特别欢乐，突然有一天就没继续下去，也不知道是什么时候结束，但还是保存在自己的联系人里，默默的看着他们的变化，也是一种属于我自己的乐趣，</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>注意身体，不要熬夜现在是2022年4月2日00:00:57，虽然标题是熬夜之旅，实际上是我想不出标题的名字而已，就酱紫，如果我再不睡，我的折叠床就要被傻逼玷污了！就酱紫，掰掰。还有一件事，这个标签是自言自语，看看就行了，全当我放屁，掰掰。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;熬夜之旅&quot;&gt;&lt;a href=&quot;#熬夜之旅&quot; class=&quot;headerlink&quot; title=&quot;熬夜之旅&quot;&gt;&lt;/a&gt;熬夜之旅&lt;/h3&gt;&lt;p&gt;  今天在工作室度过第一个夜晚，虽然在暑假比赛的时候已经住过另一个工作室了，但是这里还是头一次，和我一起的有&lt;a href=</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="智障" scheme="http://mrnobody233.github.io/tags/%E6%99%BA%E9%9A%9C/"/>
    
    <category term="自言自语" scheme="http://mrnobody233.github.io/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件和props</title>
    <link href="http://mrnobody233.github.io/2022/04/01/Vue%E7%BB%84%E4%BB%B6%E5%92%8Cprops/"/>
    <id>http://mrnobody233.github.io/2022/04/01/Vue%E7%BB%84%E4%BB%B6%E5%92%8Cprops/</id>
    <published>2022-04-01T06:50:11.000Z</published>
    <updated>2022-04-03T08:07:17.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件之间可以相互引用，首先得<span style="color:red">注册后使用<span></span></span></p><h4 id="如何注册"><a href="#如何注册" class="headerlink" title="如何注册"></a>如何注册</h4><p>注册组件的方式分为两种，<span style="color:red">全局注册</span> 和 <span style="color:red">局部注册</span></p><ul><li>被全局注册的组件，<span style="color:red">可以在全局任何一个组件内使用/<span></span></span></li><li>被局部注册的组件，<span style="color:red">只能在当前注册的范围内使用</span></li></ul><h5 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h5><ol><li>在main.js 中导入需要被<span style="color:red">全局注册</span> 的组件   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">"@/components/Count.vue"</span>;</span><br></pre></td></tr></tbody></table></figure></li><li>调用Vue.component()方法全局注册组件   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">'Count'</span>, <span class="title class_">Count</span>)</span><br></pre></td></tr></tbody></table></figure></li><li>在app组件中使用Count组件   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Count</span>&gt;&lt;/<span class="title class_">Count</span>&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h5 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h5><ol><li>在app.vue中导入需要被<span style="color:red">局部注册</span>的组件   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">"@/components/Count.vue"</span>;</span><br></pre></td></tr></tbody></table></figure></li><li>在components节点下通过键值对的方式注册组件   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>: {</span><br><span class="line"> <span class="string">'Count'</span>: <span class="title class_">Count</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>在app组件中使用Count组件   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Count</span>&gt;&lt;/<span class="title class_">Count</span>&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h5 id="全局注册和局部注册的区别"><a href="#全局注册和局部注册的区别" class="headerlink" title="全局注册和局部注册的区别"></a>全局注册和局部注册的区别</h5><ul><li>被全局注册的组件，可以在全局任何一个组件内使用</li><li>被局部注册的组件，只能在当前注册的方位内使用</li></ul><hr><h3 id="组件的props"><a href="#组件的props" class="headerlink" title="组件的props"></a>组件的props</h3><p>props是组件的<span style="color:red">自定义属性</span>，组件的使用者可以通过props<span style="color:red">把数据传递到子组件内部</span>，供子组件内部进行使用。</p><ul><li>作用：父组件通过props<span style="color:red">向子组件传递要展示的数据</span></li><li>好处：提高了组件的<span style="color:red">复用性</span></li></ul><h4 id="如何声明props"><a href="#如何声明props" class="headerlink" title="如何声明props"></a>如何声明props</h4><p>在封装Vue组件时，可以把<span style="color:red">动态的数据项</span>作为props自定义属性。自定义属性可以在当前组件的模板结构中被直接使用。</p><p>在子组件中声明两个要使用的props数据 比如向外界传递一个标题，作者 可以声明一个props数组</p><ul><li>外界可以传递指定的数据，到当前的组件中<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">'title'</span>,<span class="string">'author'</span>]</span><br></pre></td></tr></tbody></table></figure></li><li>然后可以在DOM结构中使用<span style="color:red">title</span>的值和<span style="color:red">author的值</span>，使用插值表达式<code>{{}}</code> 将两个值渲染到里面</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="title class_">Article</span>组件</span><br><span class="line">  &lt;h3&gt;标题：{{ title }}&lt;/h3&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>作者:{{ author }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  抽刀断水水更流，举杯消愁愁更愁</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>接着在使用这个组件期间，可以传递两个数据的值</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Article</span> title=<span class="string">"鹅鹅鹅"</span> author=<span class="string">"木子日天"</span>&gt;&lt;/<span class="title class_">Article</span>&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>也可以使用v-bind属性绑定的形式，为组件动态绑定props的值</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Article</span> :title=<span class="string">"info.title"</span> :author=<span class="string">"info.name"</span>&gt;&lt;/<span class="title class_">Article</span>&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="props验证"><a href="#props验证" class="headerlink" title="props验证"></a>props验证</h4><p> 指的是：在封装组件时<span style="color:red">对外界传递过来的props数据</span>进行合法性的效验，从而防止数据不合法的问题。</p><p> 使用<span style="color:red">数组类型</span>props节点的话，无法为每个props<span style="color:red">指定具体的数据类型</span></p><h4 id="对象类型的props节点"><a href="#对象类型的props节点" class="headerlink" title="对象类型的props节点"></a><span style="color:red">对象类型</span>的props节点</h4><p> 使用对象类型的props节点，可以对每个props <span style="color:red">进行数据类型的效验</span></p><p> 对象类型的props节点，<span style="color:red">提供了多种数据验证方案</span></p><ol><li>基础的类型检查 <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">props</span>:{</span><br><span class="line">   <span class="comment">// title的属性值只能是数字类型</span></span><br><span class="line">  <span class="attr">title</span>:<span class="title class_">Number</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>多个可能的类型  <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">props</span>:{</span><br><span class="line">   <span class="comment">// title的属性值可以是 "字符串" 或者 "数字"</span></span><br><span class="line">  <span class="attr">title</span>:[<span class="title class_">String</span>,<span class="title class_">Number</span>],</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure></li><li>必填项效验   <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">props</span>:{</span><br><span class="line">  <span class="attr">title</span>:{</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">String</span>,   <span class="comment">// 表示当前属性的值必须是String字符串类型</span></span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span>  <span class="comment">// 表示当前属性是</span></span><br><span class="line">  }</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure></li><li>属性默认值  <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">props</span>:{</span><br><span class="line">  <span class="attr">age</span>:{</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">Number</span>,   <span class="comment">// 表示当前属性的值必须是String字符串类型</span></span><br><span class="line">    <span class="attr">default</span>:<span class="number">18</span>,   <span class="comment">// 如果有使用者没有指定 age 的值 则它的默认值为18</span></span><br><span class="line">  }</span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure></li><li>自定义验证函数</li></ol><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>指的是<span style="color:red">动态的切换组件的显示与隐藏。</span>vue提供了一个内置的<code>&lt;component&gt;</code>组件，专门用来实现组件的动态渲染。</p><ul><li><code>&lt;component&gt;</code> 是组件的<span style="color:red">占位符</span></li><li>通过 <span style="color:red">is属性</span> 动态指定 <span style="color:red">要渲染的组件名称</span></li><li><code>&lt;component is="要渲染的组件的名称"&gt;&lt;/component&gt;</code></li></ul><h5 id="使用keep-alive-保持这状态"><a href="#使用keep-alive-保持这状态" class="headerlink" title="使用keep-alive 保持这状态"></a>使用keep-alive 保持这状态</h5><p>默认情况下，切换动态组件时<span style="color:red">无法保持组件的状态</span>。这样就可以使用<code> &lt;keep-alive&gt;</code>组件保持动态组件的状态</p><p>使用方式非常简单</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h3&gt;&lt;p&gt;组件之间可以相互引用，首先得&lt;span style=&quot;color:red&quot;&gt;注册后使用&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>不要熬夜</title>
    <link href="http://mrnobody233.github.io/2022/03/28/%E4%B8%8D%E8%A6%81%E7%86%AC%E5%A4%9C/"/>
    <id>http://mrnobody233.github.io/2022/03/28/%E4%B8%8D%E8%A6%81%E7%86%AC%E5%A4%9C/</id>
    <published>2022-03-28T14:31:41.000Z</published>
    <updated>2022-03-29T02:18:45.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="熬夜"><a href="#熬夜" class="headerlink" title="熬夜"></a><span style="color:#4D77FF">熬夜</span></h3><hr><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>昨天和工作室的小伙伴们一起看<a href="https://charet.github.io/">社恐废宅充电器</a>在玩一款新的游戏，叫做<span style="color:#5EE6EB">幽灵线: 东京</span>，我们更喜欢叫他<span style="color:#FFB72B">林正英模拟器</span><img src="http://i0.hdslb.com/bfs/article/51c890784afb0a55bb8a2d8af4431dcc4809eac3.jpg" alt="" width="50"></p><p>对了那个游戏长这样<img src="http://p2.itc.cn/q_70/images03/20210714/2ce935a73e8f4db89e26c91f37b6561f.jpeg" alt="" width="100">确实比较新颖，因为他的攻击方式是把手比作枪，用手射出子弹一样，给人眼前一亮的感觉，但是玩久了感觉有点单调，不算很耐玩的游戏，也许是它太贵了我买不起，要200多RMB。</p><hr><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><p>我们的<a href="https://charet.github.io/">社恐废宅充电器</a>就开始了今天的<span style="color:#6A5495">熬夜</span>，他花了一晚上的时间通关了<span style="color:#5EE6EB">幽灵线: 东京</span>，虽然是<span style="color:red">简单版的</span>模式，但主要的是他通宵到到第二天中午才开始睡觉，这是他的睡姿<img src="https://raw.githubusercontent.com/MrNobody233/Pohot/main/blog/Nn_Sleep.jpg" width="100" alt="图片没有显示呀，网太差了吧~"> 睡得和<span style="color:red">死了</span>一样，这样的情况已经不是第一次了，我们也不是第一次提醒他，所以这里提前说明一下，如果他突然有一天走着走着就<span style="color:red">猝死了</span>，希望他不要来找我，因为我已经提醒了很多次了，</p><hr><h4 id="接着"><a href="#接着" class="headerlink" title="接着"></a>接着</h4><p>在寒假的时候我也熬夜，但是没有他这么严重，最多熬到四五点，偶尔六点多起来去吃早餐，我记得五点半去的时候老板娘还没有准备好，所以我等到六点在去吃的，挖槽，原来早饭这么好吃，特别是那个<span style="color:#DD4A48">猪血粉</span>，等学校解封我回我奶奶家，一定得再去吃一次，现在想起来那个老板娘还是我小学同学的妈妈，她告诉我她女儿去参军了，两年以后才会回来，我倒是挺期待她能被改变成什么样，但是我最希望的是老板娘能送我瓶<span style="color:#A05344">核桃味</span>的早餐奶给我喝，我太喜欢喝了，噗哈哈。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>额，今天写的这个主要是做了一个新的分类，叫做<span style="color:#EEB76B">自言自语</span>，其目的是为了水博客，和分享关于自己有意思的事情，又或者是把自己可能会忘记的日常存在这里，所以最后还是点名一下主题把，就是希望我以后能少熬点夜，不能和那个SB一样，就当为了吃到好吃的<span style="color:#DD4A48">猪血粉</span>而努力吧，就这样，晚安~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;熬夜&quot;&gt;&lt;a href=&quot;#熬夜&quot; class=&quot;headerlink&quot; title=&quot;熬夜&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:#4D77FF&quot;&gt;熬夜&lt;/span&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="智障" scheme="http://mrnobody233.github.io/tags/%E6%99%BA%E9%9A%9C/"/>
    
    <category term="自言自语" scheme="http://mrnobody233.github.io/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>实用网站</title>
    <link href="http://mrnobody233.github.io/2022/03/26/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>http://mrnobody233.github.io/2022/03/26/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/</id>
    <published>2022-03-26T13:19:12.000Z</published>
    <updated>2022-04-21T13:42:13.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实用网站"><a href="#实用网站" class="headerlink" title="实用网站"></a>实用网站</h2><p>我的文件夹里有许多使用的网站，但也只是放在文件夹里，乱七八糟，没有整理，所以现在放在这里，以后就可以更加方便的利用这些网站</p><hr><h3 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a><span style="color:#00a8ff">编程类</span></h3><p><a href="https://flatuicolors.com/">颜色网站</a> 不知道如何配色可以看看介个网站</p><p><a href="https://colorhunt.co/">另一个颜色网站</a> 这个也不错</p><p><a href="https://unbug.github.io/codelf/">取名鬼才</a>不知道取什么变量名可以看看这个</p><p><a href="https://www.iconfont.cn/">阿里字库</a>不管是网页还是PS，又或者是PPT，都可以用得上，真不错</p><h3 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a><span style="color:#9c88ff">图片类</span></h3><p><a href="https://wall.alphacoders.com/">wallpaper壁纸</a> 有许多挺不错的漂亮壁纸可以在这里看</p><p><a href="http://www.soutushenqi.com/home">搜图神器</a> 可以搜索超清的好康的图片 主要我是<span style="color:red">荣耀捐赠会员</span></p><h3 id="音乐类"><a href="#音乐类" class="headerlink" title="音乐类"></a><span style="color:#e84118">音乐类</span></h3><p><a href="https://music.liuzhijin.cn/">刘志进音乐直连搜索</a> 可以在这里搜索很多音乐</p><p><a href="https://link.hhtjim.com/">外链转换工具</a> 可以配合上一个网站获得音乐的mp3网址</p><h3 id="影视类"><a href="#影视类" class="headerlink" title="影视类"></a><span style="color:#4b4b4b">影视类</span></h3><p><a href="https://www.hwjyingshi.xyz/">hwj影视</a> 可以看各种电影和番剧 (<span style="color:#ff3838">使用手机打开会有广告，推荐打开网页版 </span>)</p><p><a href="http://www.xfcdm.com/">寻剧吧</a> 也是看各种电影和番剧 (<span style="color:#ff3838">使用手机打开会有广告，推荐打开网页版 </span>)</p><p><a href="https://www.bilibili.com/">蜀黍的网站</a> 你所热爱的就是你的生活 (<strong>陈睿 吃柠檬</strong>)</p><p><a href="https://www.youtube.com/">油管</a> 可以在里面找乐子0.0 <span style="color:#ccc">要翻墙 </span></p><h3 id="娱乐类"><a href="#娱乐类" class="headerlink" title="娱乐类"></a><span style="color:#ff9f1a">娱乐类</span></h3><p><a href="https://chishenme.xyz/">今天吃什么</a> 不知道吃什么可以看看介个</p><p><a href="https://picrew.me/">Picrew</a> 随机生成头像，我的<a href="https://github.com/MrNobody233">github</a>的<span style="color:#afcfb7">头像</span>就是这里来的，是不是很好看 qwq <span style="color:#ccc">要翻墙 </span></p> <img src="https://avatars.githubusercontent.com/u/96650292?v=4" alt="图片没有显示呀，网太差了吧~" width="100"><p><a href="https://www.dbbqb.com/">逗比拯救世界</a> 很多各种各样的<span style="color:#ad9d3e">表情包</span>，逗比必备哦。</p><img src="https://raw.githubusercontent.com/MrNobody233/Pohot/main/blog/cheems.jpg" alt="图片没有显示呀，网太差了吧~" width="100"><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><span style="color:#505a63">其他</span></h3><p><a href="https://free.3v.do/member/index.asp">免费空间</a> 学习html css的时候跟着<span style="color:pink">pink</span>老师找到的网站。</p><p><a href="http://mrnobody.3vhost.net/">木子网</a> 上传的大一下学期的期末作业，纯html和css，做的好像比现在还好看许多，果然我把css忘光了。</p><p><a href="http://172.16.0.75/">查看综测分</a> 查看综测分</p><p><a href="https://zjkgjw.educationgroup.cn/jxkjxy_jsxsd/">学校选课</a> 学校选修网课</p><br><h3 id="无聊了继续更新-拜拜"><a href="#无聊了继续更新-拜拜" class="headerlink" title=" 无聊了继续更新 拜拜 "></a><span style="color:pink"> 无聊了继续更新 拜拜 </span></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实用网站&quot;&gt;&lt;a href=&quot;#实用网站&quot; class=&quot;headerlink&quot; title=&quot;实用网站&quot;&gt;&lt;/a&gt;实用网站&lt;/h2&gt;&lt;p&gt;我的文件夹里有许多使用的网站，但也只是放在文件夹里，乱七八糟，没有整理，所以现在放在这里，以后就可以更加方便的利用这些网站&lt;</summary>
      
    
    
    
    <category term="生活" scheme="http://mrnobody233.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="网站" scheme="http://mrnobody233.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="工具" scheme="http://mrnobody233.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vue指令</title>
    <link href="http://mrnobody233.github.io/2022/03/26/Vue%E6%8C%87%E4%BB%A4/"/>
    <id>http://mrnobody233.github.io/2022/03/26/Vue%E6%8C%87%E4%BB%A4/</id>
    <published>2022-03-26T09:33:02.000Z</published>
    <updated>2022-03-26T11:19:52.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h3><p>  虽然学习完了Vue，但还有许多地方木有掌握，所以今天就来复习一下Vue还没有掌握的指令</p><ul><li><p>按键修饰符</p></li><li><p>条件渲染指令</p></li><li><p>循环渲染指令</p><p>虽然只有一些内容，但还是要认真的写下去，不然就得去平板看我写的丑不拉几的字，我实在不忍心看下去，这也是在这里复习的原因之一。</p></li></ul><hr><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p>  在监听<strong>键盘</strong>事件的时候，我们需要判断详细的按键，此时，可以为<strong>键盘相关的事件</strong>添加<strong>按键修饰符</strong></p><p>  举一个非常简单的案例，当我们在登录页面输入完密码之后，按下<strong>回车键</strong>后使用Ajax发送数据 如何实现捏？</p><p>我们可以使用 <code>@keyup</code>事件</p><p><code>&lt;input type="password" @keyup.enter="commitAjax"&gt;</code></p><p>  这样在input表单中按下回车键就可以触发方法了 非常的方便，学废了。</p><hr><h4 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h4><p>这个好像挺简单的，既然打出来了，全当复习用了<br>这个东西主要用来辅助开发者<strong>按需控制DOM的显示与隐藏</strong><br>但是条件渲染指令有<strong>两个</strong></p><ul><li>v-if</li><li>v-show</li></ul><p>两者区别不大 但还是要讲一讲</p><p>继续举一个简单地例子</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是被 v-if 控制的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- -------当flag为false的时候两者都会隐藏 但是隐藏的方法不一样-------- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是被 v-show 控制的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>v-if 会<strong>动态创建元素</strong>或者<strong>移除</strong><br>v-show 则是给元素添加 <code>display:none;</code>样式 来实现元素的显示和隐藏 </p><p><strong>差点忘记了还有一个 v-else</strong></p><p>v-else指令<strong>必须搭配</strong> v-if 来进行使用 否则将不会被识别 来看个简单地例子就会了</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>差<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>是不是很简单呢</p><hr><h4 id="循环渲染指令"><a href="#循环渲染指令" class="headerlink" title="循环渲染指令"></a>循环渲染指令</h4><p>实际上这个才是我要复习的内容，前面两个都太简单了，虽然这个也是，看看文档就会了，但是为了以后不用看文档，所以才认真写一写吧</p><p><strong>V-for</strong>列表渲染指令，用于开发者<strong>基于一个数组来循环渲染一个列表结构</strong></p><p>先来看看代码</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:{</span><br><span class="line">  <span class="comment">// 列表数据</span></span><br><span class="line">  list[</span><br><span class="line">    {<span class="attr">id</span>: <span class="number">1</span> ,<span class="attr">name</span>: <span class="string">'木子日天'</span> },</span><br><span class="line">    {<span class="attr">id</span>: <span class="number">2</span> ,<span class="attr">name</span>: <span class="string">'李日天'</span> },</span><br><span class="line">    {<span class="attr">id</span>: <span class="number">3</span> ,<span class="attr">name</span>: <span class="string">'木子昊'</span> },</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要循环那个DOM 就给那个加上 <code>v-for="item in list"</code> </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'item in list'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{item.id}} ,{{item.name}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>item 是循环的每一项<br>list是被循环的数组 </p><p>结果就是</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,木子日天</span><br><span class="line"><span class="number">2</span>,李日天</span><br><span class="line"><span class="number">3</span>,木子昊</span><br></pre></td></tr></tbody></table></figure><p>使用了v-for指定那么一定要绑定一个 <strong>:key属性</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{item.id}} ,{{item.name}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>就酱紫 拜拜</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vue指令&quot;&gt;&lt;a href=&quot;#Vue指令&quot; class=&quot;headerlink&quot; title=&quot;Vue指令&quot;&gt;&lt;/a&gt;Vue指令&lt;/h3&gt;&lt;p&gt;  虽然学习完了Vue，但还有许多地方木有掌握，所以今天就来复习一下Vue还没有掌握的指令&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://mrnobody233.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>First_Vue_Web</title>
    <link href="http://mrnobody233.github.io/2022/03/25/First-Vue-Web/"/>
    <id>http://mrnobody233.github.io/2022/03/25/First-Vue-Web/</id>
    <published>2022-03-25T10:45:09.000Z</published>
    <updated>2022-03-26T09:11:36.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为我的同学<a href="https://thirsty-c.github.io/">胃病患者</a>在上学期参加了，信工的移动安卓设计比赛，并获得了二等奖，我很是<strong>心动</strong> ，并不是心动二等奖，而是心动因为二等奖获得的<strong>雷蛇鼠标</strong>，虽然我已经买了一个比他更贵的鼠标，但是我好不爽，能白嫖为什么要买，所以我下定决心，去参加了这个学期的网站设计大赛，获得更高的奖品，至少给我一个<strong>雷蛇键盘</strong></p><hr><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>正好最近学完Vue,有用武之地，为了不让知识悄悄溜走，所以我决定使用Vue来制作本次项目，询问了举办方老师，可以使用Vue之类的东东，所以很快啊，我立马新建文件夹，可是不知道做什么类型的东西，思考许久，终于！！ 我决定做一个做烂的东西，也就是我们工作室的网站，但是是<strong>SPA（单页应用程序）</strong>，想法有了，就有动力去做了。正好比赛需要上交一份PPT，也就顺便把SPA的介绍在博客里面写好，这样就不用再去百度了，我真聪明，哈哈哈哈哈哈！。</p><hr><h3 id="SPA（单页面应用程序）"><a href="#SPA（单页面应用程序）" class="headerlink" title="SPA（单页面应用程序）"></a>SPA（单页面应用程序）</h3><h4 id="1-什么是单页面应用程序"><a href="#1-什么是单页面应用程序" class="headerlink" title="1.什么是单页面应用程序"></a>1.什么是单页面应用程序</h4><p><strong>单页面应用程序</strong> （英文名:<strong>S</strong>ingle <strong>P</strong>age <strong>A</strong>pplication）简称SPA，顾名思义，指的就是一个Web网站中只有<strong>唯一一个HTML页面</strong>，所有的功能和交互都在这唯一的一个页面内完成</p><h4 id="2-单页面应用程序的特点"><a href="#2-单页面应用程序的特点" class="headerlink" title="2.单页面应用程序的特点"></a>2.单页面应用程序的特点</h4><p>单页面应用程序将所有的功能局限于一个web页面中。<strong>仅在该web页面初始化时加载相应的资源</strong>（HTML，JavaScript，CSS）</p><p>一旦页面加载完成，SPA不会因为用户的操作而<strong>进行页面的重新加载或跳转</strong>。而是利用JavaScript动态的变换HTML内容，从而实现用户的交互。</p><h4 id="3-单页应用程序的优点"><a href="#3-单页应用程序的优点" class="headerlink" title="3.单页应用程序的优点"></a>3.单页应用程序的优点</h4><h5 id="良好的交互体验"><a href="#良好的交互体验" class="headerlink" title="良好的交互体验"></a>良好的交互体验</h5><ul><li>单页面应用的内容的改变不需要重新加载整个页面</li><li>获取数据也是通过Ajax异步获取</li><li>没有页面之间的跳转，所以不会出现“白屏现象”</li></ul><h5 id="良好的前后端工作分离模式"><a href="#良好的前后端工作分离模式" class="headerlink" title="良好的前后端工作分离模式"></a>良好的前后端工作分离模式</h5><ul><li>后端专注于提供API接口，更容易实现API接口的附庸</li><li>前端专注于页面的渲染，更利于前端工程化的发展</li></ul><h5 id="减轻服务器的压力"><a href="#减轻服务器的压力" class="headerlink" title="减轻服务器的压力"></a>减轻服务器的压力</h5><ul><li>服务器只需提供数据，不负责页面的合成与逻辑的处理，吞吐能力会提高几倍。</li></ul><h4 id="4-单页应用程序的缺点"><a href="#4-单页应用程序的缺点" class="headerlink" title="4.单页应用程序的缺点"></a>4.单页应用程序的缺点</h4><p> 1.首屏加载慢<br> 2.不利于SEO</p><hr><h2 id="长啥样？"><a href="#长啥样？" class="headerlink" title="长啥样？"></a>长啥样？</h2><p>  说了这么久那么做的到底咋样呢？实际上不怎么地，在制作期间参考了许多网站，包括学长写过的<a href="https://pjqdyd.github.io/Vue-bst-web/#/">工作室网站</a>发现我写的实在是太垃圾了，简直就是一坨屎一样，不过好歹是我第一次完成Vue作品，也使用了大量的<strong>Vant组件</strong>和<strong>Element组件</strong>，整体看起来不算很丑（自我安慰），相信我以后技术成熟了能够更加完善这个项目，不用再参考公众号的布局。哈哈，那么就来看一看吧。</p><h3 id="长这样。"><a href="#长这样。" class="headerlink" title="长这样。"></a>长这样。</h3><p><img src="https://raw.githubusercontent.com/MrNobody233/Pohot/main/First_Web_03.png" alt="1"></p><h3 id="这样。"><a href="#这样。" class="headerlink" title="这样。"></a>这样。</h3><p><img src="https://raw.githubusercontent.com/MrNobody233/Pohot/main/First_Web_02.png" alt="2"></p><h3 id="和这样"><a href="#和这样" class="headerlink" title="和这样"></a>和这样</h3><p><img src="https://raw.githubusercontent.com/MrNobody233/Pohot/main/First_Web_01.png" alt="3"></p><p>没有全截完 但是也可以看出 制作水平很一般了。 所以还需再接再厉。拜拜~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;因为我的同学&lt;a href=&quot;https://thirsty-c.github.io/&quot;&gt;胃病患者&lt;/a&gt;在上学期参加了，信工的移动安卓设计</summary>
      
    
    
    
    <category term="web前端" scheme="http://mrnobody233.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="项目" scheme="http://mrnobody233.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="前端" scheme="http://mrnobody233.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
