{"version":3,"file":"js/633.b75985b3.js","mappings":"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","sources":["webpack://myabout/./src/components/index/Five.vue","webpack://myabout/./node_modules/vanta/vendor/GPUComputationRenderer.js","webpack://myabout/./node_modules/vanta/src/vanta.birds.js","webpack://myabout/src/components/index/Five.vue","webpack://myabout/./src/components/index/Five.vue?632e","webpack://myabout/./src/components/index/Five.vue?d52c"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"five\"},[_c('div',{ref:\"vantaRef\",staticStyle:{\"width\":\"100%\",\"height\":\"100vh\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","const win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\nlet {\r\n\tCamera,\r\n\tClampToEdgeWrapping,\r\n\tDataTexture,\r\n\tFloatType,\r\n\tMesh,\r\n\tNearestFilter,\r\n\tPlaneBufferGeometry,\r\n\tRGBAFormat,\r\n\tScene,\r\n\tShaderMaterial,\r\n\tWebGLRenderTarget\r\n} = (THREE || {})\r\n\r\n/**\r\n * GPUComputationRenderer, based on SimulationRenderer by zz85\r\n *\r\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\r\n * for each compute element (texel)\r\n *\r\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\r\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\r\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\r\n *\r\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\r\n * as inputs to render the textures of the next frame.\r\n *\r\n * The render targets of the variables can be used as input textures for your visualization shaders.\r\n *\r\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\r\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\r\n *\r\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\r\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\r\n *\r\n * -------------\r\n *\r\n * Basic use:\r\n *\r\n * // Initialization...\r\n *\r\n * // Create computation renderer\r\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\r\n *\r\n * // Create initial state float textures\r\n * var pos0 = gpuCompute.createTexture();\r\n * var vel0 = gpuCompute.createTexture();\r\n * // and fill in here the texture data...\r\n *\r\n * // Add texture variables\r\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\r\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\r\n *\r\n * // Add variable dependencies\r\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\r\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\r\n *\r\n * // Add custom uniforms\r\n * velVar.material.uniforms.time = { value: 0.0 };\r\n *\r\n * // Check for completeness\r\n * var error = gpuCompute.init();\r\n * if ( error !== null ) {\r\n *\t\tconsole.error( error );\r\n  * }\r\n *\r\n *\r\n * // In each frame...\r\n *\r\n * // Compute!\r\n * gpuCompute.compute();\r\n *\r\n * // Update texture uniforms in your visualization materials with the gpu renderer output\r\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\r\n *\r\n * // Do your rendering\r\n * renderer.render( myScene, myCamera );\r\n *\r\n * -------------\r\n *\r\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\r\n * Note that the shaders can have multiple input textures.\r\n *\r\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\r\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\r\n *\r\n * var inputTexture = gpuCompute.createTexture();\r\n *\r\n * // Fill in here inputTexture...\r\n *\r\n * myFilter1.uniforms.theTexture.value = inputTexture;\r\n *\r\n * var myRenderTarget = gpuCompute.createRenderTarget();\r\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\r\n *\r\n * var outputRenderTarget = gpuCompute.createRenderTarget();\r\n *\r\n * // Now use the output texture where you want:\r\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\r\n *\r\n * // And compute each frame, before rendering to screen:\r\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\r\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\r\n *\r\n *\r\n *\r\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\r\n * @param {WebGLRenderer} renderer The renderer\r\n  */\r\n\r\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer, userTHREE) {\r\n\tif (userTHREE) {\r\n\t\t({ Camera,\r\n\t\t\tClampToEdgeWrapping,\r\n\t\t\tDataTexture,\r\n\t\t\tFloatType,\r\n\t\t\tMesh,\r\n\t\t\tNearestFilter,\r\n\t\t\tPlaneBufferGeometry,\r\n\t\t\tRGBAFormat,\r\n\t\t\tScene,\r\n\t\t\tShaderMaterial,\r\n\t\t\tWebGLRenderTarget} = userTHREE)\r\n\t}\r\n\r\n\r\n\tthis.variables = [];\r\n\r\n\tthis.currentTextureIndex = 0;\r\n\r\n\tvar dataType = FloatType;\r\n\r\n\tvar scene = new Scene();\r\n\r\n\tvar camera = new Camera();\r\n\tcamera.position.z = 1;\r\n\r\n\tvar passThruUniforms = {\r\n\t\tpassThruTexture: { value: null }\r\n\t};\r\n\r\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\r\n\r\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\r\n\tscene.add( mesh );\r\n\r\n\r\n\tthis.setDataType = function ( type ) {\r\n\r\n\t\tdataType = type;\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\r\n\r\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\r\n\r\n\t\tvar variable = {\r\n\t\t\tname: variableName,\r\n\t\t\tinitialValueTexture: initialValueTexture,\r\n\t\t\tmaterial: material,\r\n\t\t\tdependencies: null,\r\n\t\t\trenderTargets: [],\r\n\t\t\twrapS: null,\r\n\t\t\twrapT: null,\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter\r\n\t\t};\r\n\r\n\t\tthis.variables.push( variable );\r\n\r\n\t\treturn variable;\r\n\r\n\t};\r\n\r\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\r\n\r\n\t\tvariable.dependencies = dependencies;\r\n\r\n\t};\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tif ( ! renderer.capabilities.isWebGL2 &&\r\n\t\t\t ! renderer.extensions.get( \"OES_texture_float\" ) ) {\r\n\r\n\t\t\treturn \"No OES_texture_float support for float textures.\";\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\r\n\r\n\t\t\treturn \"No support for vertex shader textures.\";\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\r\n\r\n\t\t\tvar variable = this.variables[ i ];\r\n\r\n\t\t\t// Creates rendertargets and initialize them with input texture\r\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\r\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\r\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\r\n\r\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\r\n\t\t\tvar material = variable.material;\r\n\t\t\tvar uniforms = material.uniforms;\r\n\r\n\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\r\n\r\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\r\n\r\n\t\t\t\t\t\t// Checks if variable exists\r\n\t\t\t\t\t\tvar found = false;\r\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\r\n\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! found ) {\r\n\r\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\r\n\r\n\t\t\t\t\tmaterial.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.currentTextureIndex = 0;\r\n\r\n\t\treturn null;\r\n\r\n\t};\r\n\r\n\tthis.compute = function () {\r\n\r\n\t\tvar currentTextureIndex = this.currentTextureIndex;\r\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\r\n\r\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar variable = this.variables[ i ];\r\n\r\n\t\t\t// Sets texture dependencies uniforms\r\n\t\t\tif ( variable.dependencies !== null ) {\r\n\r\n\t\t\t\tvar uniforms = variable.material.uniforms;\r\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\r\n\r\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\r\n\r\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Performs the computation for this variable\r\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.currentTextureIndex = nextTextureIndex;\r\n\r\n\t};\r\n\r\n\tthis.getCurrentRenderTarget = function ( variable ) {\r\n\r\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\r\n\r\n\t};\r\n\r\n\tthis.getAlternateRenderTarget = function ( variable ) {\r\n\r\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\r\n\r\n\t};\r\n\r\n\tfunction addResolutionDefine( materialShader ) {\r\n\r\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\r\n\r\n\t}\r\n\r\n\tthis.addResolutionDefine = addResolutionDefine;\r\n\r\n\r\n\t// The following functions can be used to compute things manually\r\n\r\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\r\n\r\n\t\tuniforms = uniforms || {};\r\n\r\n\t\tvar material = new ShaderMaterial( {\r\n\t\t\tuniforms: uniforms,\r\n\t\t\tvertexShader: getPassThroughVertexShader(),\r\n\t\t\tfragmentShader: computeFragmentShader\r\n\t\t} );\r\n\r\n\t\taddResolutionDefine( material );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tthis.createShaderMaterial = createShaderMaterial;\r\n\r\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\r\n\r\n\t\tsizeXTexture = sizeXTexture || sizeX;\r\n\t\tsizeYTexture = sizeYTexture || sizeY;\r\n\r\n\t\twrapS = wrapS || ClampToEdgeWrapping;\r\n\t\twrapT = wrapT || ClampToEdgeWrapping;\r\n\r\n\t\tminFilter = minFilter || NearestFilter;\r\n\t\tmagFilter = magFilter || NearestFilter;\r\n\r\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\r\n\t\t\twrapS: wrapS,\r\n\t\t\twrapT: wrapT,\r\n\t\t\tminFilter: minFilter,\r\n\t\t\tmagFilter: magFilter,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\ttype: dataType,\r\n\t\t\tstencilBuffer: false,\r\n\t\t\tdepthBuffer: false\r\n\t\t} );\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t};\r\n\r\n\tthis.createTexture = function () {\r\n\r\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\r\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\r\n\r\n\t};\r\n\r\n\tthis.renderTexture = function ( input, output ) {\r\n\r\n\t\t// Takes a texture, and render out in rendertarget\r\n\t\t// input = Texture\r\n\t\t// output = RenderTarget\r\n\r\n\t\tpassThruUniforms.passThruTexture.value = input;\r\n\r\n\t\tthis.doRenderTarget( passThruShader, output );\r\n\r\n\t\tpassThruUniforms.passThruTexture.value = null;\r\n\r\n\t};\r\n\r\n\tthis.doRenderTarget = function ( material, output ) {\r\n\r\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tmesh.material = material;\r\n\t\trenderer.setRenderTarget( output );\r\n\t\trenderer.render( scene, camera );\r\n\t\tmesh.material = passThruShader;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t};\r\n\r\n\t// Shaders\r\n\r\n\tfunction getPassThroughVertexShader() {\r\n\r\n\t\treturn\t\"void main()\t{\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t}\r\n\r\n\tfunction getPassThroughFragmentShader() {\r\n\r\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"void main() {\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\r\n\t\t\t\t\"\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport default  GPUComputationRenderer;\r\n","// Adapted from https://threejs.org/examples/canvas_geometry_birds.html\r\n\r\nimport VantaBase, { VANTA } from './_base.js'\r\n// import {rn, ri, sample} from './helpers.js'\r\nimport {mobileCheck} from './helpers.js'\r\nimport GPUComputationRenderer from '../vendor/GPUComputationRenderer.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\nconst GPGPU = !mobileCheck()\r\n\r\nlet WIDTH = 32\r\nlet BIRDS = WIDTH * WIDTH\r\nconst BOUNDS = 800\r\nconst BOUNDS_HALF = BOUNDS / 2\r\n\r\n\r\nconst getNewBirdGeometry = (options) => {\r\n  const scope = new THREE.BufferGeometry()\r\n\r\n  if (options.quantity) {\r\n    WIDTH = Math.pow(2, options.quantity)\r\n    BIRDS = WIDTH * WIDTH\r\n  }\r\n  const triangles = BIRDS * 3\r\n  const points = triangles * 3\r\n\r\n  const vertices = new THREE.BufferAttribute(new Float32Array(points * 3), 3)\r\n  const birdColors = new THREE.BufferAttribute(new Float32Array(points * 3), 3)\r\n  const references = new THREE.BufferAttribute(new Float32Array(points * 2), 2)\r\n  const birdVertex = new THREE.BufferAttribute(new Float32Array(points), 1)\r\n\r\n  if (!scope.setAttribute) scope.setAttribute = scope.addAttribute // handle three.js migration r109 → r110\r\n  scope.setAttribute('position', vertices)\r\n  scope.setAttribute('birdColor', birdColors)\r\n  scope.setAttribute('reference', references)\r\n  scope.setAttribute('birdVertex', birdVertex)\r\n  // scope.addAttribute( 'normal', new Float32Array( points * 3 ), 3 )\r\n\r\n  let v = 0\r\n  const verts_push = function() {\r\n    for (let i=0; i<arguments.length; i++) {\r\n      vertices.array[v++] = arguments[i]\r\n    }\r\n  }\r\n\r\n  const wingSpan = options.wingSpan || 20\r\n  const s = options.birdSize || 1\r\n\r\n  for (let f=0; f<BIRDS; f++) {\r\n    verts_push(0, -0, -20*s, 0, 4*s, -20*s, 0, 0, 30*s) // Body\r\n    verts_push(0, 0, -15*s, -wingSpan*s, 0, 0, 0, 0, 15*s) // Left Wing\r\n    verts_push(0, 0, 15*s, wingSpan*s, 0, 0, 0, 0, -15*s) // Right Wing\r\n  }\r\n\r\n  const colorCache = {}\r\n\r\n  for (v=0; v<triangles*3; v++) {\r\n    const i = ~~(v / 3)\r\n    const x = (i % WIDTH) / WIDTH\r\n    const y = ~~(i / WIDTH) / WIDTH\r\n    const order = ~~(v / 9) / BIRDS\r\n    const key = order.toString()\r\n    const gradient = options.colorMode.indexOf('Gradient') != -1\r\n    let c\r\n    if (!gradient && colorCache[key]) {\r\n      c = colorCache[key]\r\n    } else {\r\n      c = options.effect.getNewCol(order)\r\n    }\r\n    if (!gradient && !colorCache[key]) {\r\n      colorCache[key] = c\r\n    }\r\n\r\n    birdColors.array[(v * 3) + 0] = c.r\r\n    birdColors.array[(v * 3) + 1] = c.g\r\n    birdColors.array[(v * 3) + 2] = c.b\r\n    references.array[v * 2] = x\r\n    references.array[(v * 2) + 1] = y\r\n    birdVertex.array[v] = v % 9\r\n  }\r\n  return scope.scale(0.2, 0.2, 0.2)\r\n}\r\n\r\nconst getNewBirdGeometryBasic = (options={}) => {\r\n  const scope = new THREE.BufferGeometry()\r\n  const points = []\r\n  function v( x, y, z ) {\r\n    const s = 1.5 * (options.birdSize || 1)\r\n    points.push( new THREE.Vector3( x*s, y*s, z*s ) )\r\n  }\r\n  v(   5,   0,   0 )\r\n  v( - 5, - 1,   1 )\r\n  v( - 5,   0,   0 )\r\n  v( - 5, - 2, - 1 )\r\n  v(   0,   2, - 6 )\r\n  v(   0,   2,   6 )\r\n  v(   2,   0,   0 )\r\n  v( - 3,   0,   0 )\r\n  scope.setFromPoints(points)\r\n\r\n  const indices = []\r\n  indices.push( 0, 2, 1 )\r\n  // f3( 0, 3, 2 )\r\n  indices.push( 4, 7, 6 )\r\n  indices.push( 5, 6, 7 )\r\n  scope.setIndex(indices)\r\n\r\n  // this.computeCentroids()\r\n  return scope\r\n}\r\n\r\n// Based on http://www.openprocessing.org/visuals/?visualID=6910\r\nclass Boid {\r\n  constructor (options) {\r\n    var vector = new THREE.Vector3(),\r\n    _acceleration,\r\n    _width = 500,\r\n    _height = 500,\r\n    _depth = 200, _goal,\r\n    _neighborhoodRadius = 100,\r\n    _maxSpeed = 2.5,\r\n    _maxSteerForce = 0.1,\r\n    _avoidWalls = true;\r\n\r\n    var _options = options\r\n\r\n    this.position = new THREE.Vector3()\r\n    this.velocity = new THREE.Vector3()\r\n    _acceleration = new THREE.Vector3()\r\n\r\n    this.setGoal = function ( target ) {\r\n      _goal = target;\r\n    }\r\n\r\n    // this.setAvoidWalls = function ( value ) {\r\n    //   _avoidWalls = value;\r\n    // }\r\n\r\n    this.setWorldSize = function ( width, height, depth ) {\r\n      _width = width;\r\n      _height = height;vector\r\n      _depth = depth;\r\n    }\r\n\r\n    this.run = function ( boids ) {\r\n      if ( _avoidWalls ) {\r\n        vector.set( - _width, this.position.y, this.position.z )\r\n        vector = this.avoid( vector )\r\n        vector.multiplyScalar( 5 )\r\n        _acceleration.add( vector )\r\n\r\n        vector.set( _width, this.position.y, this.position.z )\r\n        vector = this.avoid( vector )\r\n        vector.multiplyScalar( 5 )\r\n        _acceleration.add( vector )\r\n\r\n        vector.set( this.position.x, - _height, this.position.z )\r\n        vector = this.avoid( vector )\r\n        vector.multiplyScalar( 5 )\r\n        _acceleration.add( vector )\r\n\r\n        vector.set( this.position.x, _height, this.position.z )\r\n        vector = this.avoid( vector )\r\n        vector.multiplyScalar( 5 )\r\n        _acceleration.add( vector )\r\n\r\n        vector.set( this.position.x, this.position.y, - _depth )\r\n        vector = this.avoid( vector )\r\n        vector.multiplyScalar( 5 )\r\n        _acceleration.add( vector )\r\n\r\n        vector.set( this.position.x, this.position.y, _depth )\r\n        vector = this.avoid( vector )\r\n        vector.multiplyScalar( 5 )\r\n        _acceleration.add( vector )\r\n      }/* else {\r\n        this.checkBounds();\r\n      }*/\r\n\r\n      if ( Math.random() > 0.5 ) {\r\n        this.flock( boids )\r\n      }\r\n      this.move()\r\n    }\r\n\r\n    this.flock = function ( boids ) {\r\n      if ( _goal ) {\r\n        _acceleration.add( this.reach( _goal, 0.005 ) )\r\n      }\r\n      _acceleration.add( this.alignment( boids ) )\r\n      _acceleration.add( this.cohesion( boids ) )\r\n      _acceleration.add( this.separation( boids ) )\r\n    }\r\n\r\n    this.move = function () {\r\n      this.velocity.add( _acceleration )\r\n      var l = this.velocity.length()\r\n      if ( l > _maxSpeed ) {\r\n        this.velocity.divideScalar( l / _maxSpeed )\r\n      }\r\n      this.position.add( this.velocity )\r\n      _acceleration.set( 0, 0, 0 )\r\n    }\r\n\r\n    this.checkBounds = function () {\r\n      if ( this.position.x >   _width ) this.position.x = - _width;\r\n      if ( this.position.x < - _width ) this.position.x =   _width;\r\n      if ( this.position.y >   _height ) this.position.y = - _height;\r\n      if ( this.position.y < - _height ) this.position.y =  _height;\r\n      if ( this.position.z >  _depth ) this.position.z = - _depth;\r\n      if ( this.position.z < - _depth ) this.position.z =  _depth;\r\n    }\r\n\r\n    this.avoid = function ( target ) {\r\n      var steer = new THREE.Vector3()\r\n      steer.copy( this.position )\r\n      steer.sub( target )\r\n      steer.multiplyScalar( 1 / this.position.distanceToSquared( target ) )\r\n      return steer\r\n    }\r\n\r\n    this.repulse = function ( target ) {\r\n      var distance = this.position.distanceTo( target )\r\n      if ( distance < 150 ) {\r\n        var steer = new THREE.Vector3()\r\n        steer.subVectors( this.position, target )\r\n        steer.multiplyScalar( 0.5 / distance )\r\n        _acceleration.add( steer )\r\n      }\r\n    }\r\n\r\n    this.reach = function ( target, amount ) {\r\n      var steer = new THREE.Vector3()\r\n      steer.subVectors( target, this.position )\r\n      steer.multiplyScalar( amount )\r\n      return steer\r\n    }\r\n\r\n    this.alignment = function ( boids ) {\r\n      var boid, velSum = new THREE.Vector3(), count = 0, distance\r\n      const radius = _neighborhoodRadius * _options.alignment/20\r\n      for ( var i = 0, il = boids.length; i < il; i++ ) {\r\n        if ( Math.random() > 0.6 ) continue\r\n        boid = boids[ i ]\r\n        distance = boid.position.distanceTo( this.position )\r\n        if ( distance > 0 && distance <= radius ) {\r\n          velSum.add( boid.velocity )\r\n          count++\r\n        }\r\n      }\r\n      if ( count > 0 ) {\r\n        velSum.divideScalar( count )\r\n        var l = velSum.length()\r\n        if ( l > _maxSteerForce ) {\r\n          velSum.divideScalar( l / _maxSteerForce )\r\n        }\r\n      }\r\n      return velSum\r\n    }\r\n\r\n    this.cohesion = function ( boids ) {\r\n      var boid, distance,\r\n      posSum = new THREE.Vector3(),\r\n      steer = new THREE.Vector3(),\r\n      count = 0\r\n      const radius = _neighborhoodRadius * _options.cohesion/20\r\n\r\n      for ( var i = 0, il = boids.length; i < il; i ++ ) {\r\n        if ( Math.random() > 0.6 ) continue\r\n        boid = boids[ i ]\r\n        distance = boid.position.distanceTo( this.position )\r\n\r\n        if ( distance > 0 && distance <= radius ) {\r\n          posSum.add( boid.position )\r\n          count++\r\n        }\r\n      }\r\n      if ( count > 0 ) {\r\n        posSum.divideScalar( count )\r\n      }\r\n      steer.subVectors( posSum, this.position )\r\n      var l = steer.length()\r\n      if ( l > _maxSteerForce ) {\r\n        steer.divideScalar( l / _maxSteerForce )\r\n      }\r\n      return steer\r\n    }\r\n\r\n    this.separation = function ( boids ) {\r\n      var boid, distance,\r\n        posSum = new THREE.Vector3(),\r\n        repulse = new THREE.Vector3()\r\n      const radius = _neighborhoodRadius * _options.separation/20\r\n\r\n      for ( var i = 0, il = boids.length; i < il; i ++ ) {\r\n        if ( Math.random() > 0.6 ) continue\r\n        boid = boids[ i ]\r\n        distance = boid.position.distanceTo( this.position )\r\n        if ( distance > 0 && distance <= radius ) {\r\n          repulse.subVectors( this.position, boid.position )\r\n          repulse.normalize()\r\n          repulse.divideScalar( distance )\r\n          posSum.add( repulse )\r\n        }\r\n      }\r\n      return posSum\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nconst fragmentShaderPosition = `\\\r\nuniform float time;\r\nuniform float delta;\r\n\r\nvoid main() {\r\n\r\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n  vec4 tmpPos = texture2D( texturePosition, uv );\r\n  vec3 position = tmpPos.xyz;\r\n  vec3 velocity = texture2D( textureVelocity, uv ).xyz;\r\n\r\n  float phase = tmpPos.w;\r\n\r\n  phase = mod( ( phase + delta +\r\n    length( velocity.xz ) * delta * 3. +\r\n    max( velocity.y, 0.0 ) * delta * 6. ), 62.83 );\r\n\r\n  gl_FragColor = vec4( position + velocity * delta * 15. , phase );\r\n\r\n}`\r\n\r\nconst fragmentShaderVelocity = `\\\r\nuniform float time;\r\nuniform float testing;\r\nuniform float delta; // about 0.016\r\nuniform float separationDistance; // 20\r\nuniform float alignmentDistance; // 40\r\nuniform float cohesionDistance;\r\nuniform float speedLimit;\r\nuniform float freedomFactor;\r\nuniform vec3 predator;\r\n\r\nconst float width = resolution.x;\r\nconst float height = resolution.y;\r\n\r\nconst float PI = 3.141592653589793;\r\nconst float PI_2 = PI * 2.0;\r\n// const float VISION = PI * 0.55;\r\n\r\nfloat zoneRadius = 40.0;\r\nfloat zoneRadiusSquared = 1600.0;\r\n\r\nfloat separationThresh = 0.45;\r\nfloat alignmentThresh = 0.65;\r\n\r\nconst float UPPER_BOUNDS = BOUNDS;\r\nconst float LOWER_BOUNDS = -UPPER_BOUNDS;\r\n\r\nfloat rand(vec2 co){\r\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main() {\r\n\r\n  zoneRadius = separationDistance + alignmentDistance + cohesionDistance;\r\n  separationThresh = separationDistance / zoneRadius;\r\n  alignmentThresh = ( separationDistance + alignmentDistance ) / zoneRadius;\r\n  zoneRadiusSquared = zoneRadius * zoneRadius;\r\n\r\n\r\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n  vec3 birdPosition, birdVelocity;\r\n\r\n  vec3 selfPosition = texture2D( texturePosition, uv ).xyz;\r\n  vec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;\r\n\r\n  float dist;\r\n  vec3 dir; // direction\r\n  float distSquared;\r\n\r\n  float separationSquared = separationDistance * separationDistance;\r\n  float cohesionSquared = cohesionDistance * cohesionDistance;\r\n\r\n  float f;\r\n  float percent;\r\n\r\n  vec3 velocity = selfVelocity;\r\n\r\n  float limit = speedLimit;\r\n\r\n  dir = predator * UPPER_BOUNDS - selfPosition;\r\n  dir.z = 0.;\r\n  // dir.z *= 0.6;\r\n  dist = length( dir );\r\n  distSquared = dist * dist;\r\n\r\n  float preyRadius = 150.0;\r\n  float preyRadiusSq = preyRadius * preyRadius;\r\n\r\n  // move birds away from predator\r\n  if (dist < preyRadius) {\r\n\r\n    f = ( distSquared / preyRadiusSq - 1.0 ) * delta * 100.;\r\n    velocity += normalize( dir ) * f;\r\n    limit += 5.0;\r\n  }\r\n\r\n  // if (testing == 0.0) {}\r\n  // if ( rand( uv + time ) < freedomFactor ) {}\r\n\r\n  // Attract flocks to the center\r\n  vec3 central = vec3( 0., 0., 0. );\r\n  dir = selfPosition - central;\r\n  dist = length( dir );\r\n\r\n  dir.y *= 2.5;\r\n  velocity -= normalize( dir ) * delta * 5.;\r\n\r\n  for (float y=0.0;y<height;y++) {\r\n    for (float x=0.0;x<width;x++) {\r\n\r\n      vec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\r\n      birdPosition = texture2D( texturePosition, ref ).xyz;\r\n\r\n      dir = birdPosition - selfPosition;\r\n      dist = length(dir);\r\n\r\n      if (dist < 0.0001) continue;\r\n\r\n      distSquared = dist * dist;\r\n\r\n      if (distSquared > zoneRadiusSquared ) continue;\r\n\r\n      percent = distSquared / zoneRadiusSquared;\r\n\r\n      if ( percent < separationThresh ) { // low\r\n\r\n        // Separation - Move apart for comfort\r\n        f = (separationThresh / percent - 1.0) * delta;\r\n        velocity -= normalize(dir) * f;\r\n\r\n      } else if ( percent < alignmentThresh ) { // high\r\n\r\n        // Alignment - fly the same direction\r\n        float threshDelta = alignmentThresh - separationThresh;\r\n        float adjustedPercent = ( percent - separationThresh ) / threshDelta;\r\n\r\n        birdVelocity = texture2D( textureVelocity, ref ).xyz;\r\n\r\n        f = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;\r\n        velocity += normalize(birdVelocity) * f;\r\n\r\n      } else {\r\n\r\n        // Attraction / Cohesion - move closer\r\n        float threshDelta = 1.0 - alignmentThresh;\r\n        float adjustedPercent = ( percent - alignmentThresh ) / threshDelta;\r\n\r\n        f = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;\r\n\r\n        velocity += normalize(dir) * f;\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  // this make tends to fly around than down or up\r\n  // if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);\r\n\r\n  // Speed Limits\r\n  if ( length( velocity ) > limit ) {\r\n    velocity = normalize( velocity ) * limit;\r\n  }\r\n\r\n  gl_FragColor = vec4( velocity, 1.0 );\r\n\r\n}`\r\n\r\nconst birdVS = `\\\r\nattribute vec2 reference;\r\nattribute float birdVertex;\r\n\r\nattribute vec3 birdColor;\r\n\r\nuniform sampler2D texturePosition;\r\nuniform sampler2D textureVelocity;\r\n\r\nvarying vec4 vColor;\r\nvarying float z;\r\n\r\nuniform float time;\r\nuniform float birdSize;\r\n\r\nvoid main() {\r\n\r\n  vec4 tmpPos = texture2D( texturePosition, reference );\r\n  vec3 pos = tmpPos.xyz;\r\n  vec3 velocity = normalize(texture2D( textureVelocity, reference ).xyz);\r\n\r\n  vec3 newPosition = position;\r\n\r\n  if ( birdVertex == 4.0 || birdVertex == 7.0 ) {\r\n    // flap wings\r\n    newPosition.y = sin( tmpPos.w ) * 5. * birdSize;\r\n  }\r\n\r\n  newPosition = mat3( modelMatrix ) * newPosition;\r\n\r\n  velocity.z *= -1.;\r\n  float xz = length( velocity.xz );\r\n  float xyz = 1.;\r\n  float x = sqrt( 1. - velocity.y * velocity.y );\r\n\r\n  float cosry = velocity.x / xz;\r\n  float sinry = velocity.z / xz;\r\n\r\n  float cosrz = x / xyz;\r\n  float sinrz = velocity.y / xyz;\r\n\r\n  mat3 maty =  mat3(\r\n    cosry, 0, -sinry,\r\n    0    , 1, 0     ,\r\n    sinry, 0, cosry\r\n  );\r\n\r\n  mat3 matz =  mat3(\r\n    cosrz , sinrz, 0,\r\n    -sinrz, cosrz, 0,\r\n    0     , 0    , 1\r\n  );\r\n  newPosition =  maty * matz * newPosition;\r\n  newPosition += pos;\r\n  z = newPosition.z;\r\n\r\n  vColor = vec4( birdColor, 1.0 );\r\n  gl_Position = projectionMatrix *  viewMatrix  * vec4( newPosition, 1.0 );\r\n}`\r\n\r\nconst birdFS = `\\\r\nvarying vec4 vColor;\r\nvarying float z;\r\nuniform vec3 color;\r\nvoid main() {\r\n  // Fake colors for now\r\n  float rr = 0.2 + ( 1000. - z ) / 1000. * vColor.x;\r\n  float gg = 0.2 + ( 1000. - z ) / 1000. * vColor.y;\r\n  float bb = 0.2 + ( 1000. - z ) / 1000. * vColor.z;\r\n  gl_FragColor = vec4( rr, gg, bb, 1. );\r\n}`\r\n\r\nconst fillPositionTexture = function(texture) {\r\n  const theArray = texture.image.data\r\n  let k = 0\r\n  const kl = theArray.length\r\n  return (() => {\r\n    const result = []\r\n    while (k < kl) {\r\n      const x = (Math.random() * BOUNDS) - BOUNDS_HALF\r\n      const y = (Math.random() * BOUNDS) - BOUNDS_HALF\r\n      const z = (Math.random() * BOUNDS) - BOUNDS_HALF\r\n      theArray[k + 0] = x\r\n      theArray[k + 1] = y\r\n      theArray[k + 2] = z\r\n      theArray[k + 3] = 1\r\n      result.push(k += 4)\r\n    }\r\n    return result\r\n  })()\r\n}\r\n\r\nconst fillVelocityTexture = function(texture) {\r\n  const theArray = texture.image.data\r\n  let k = 0\r\n  const kl = theArray.length\r\n  return (() => {\r\n    const result = []\r\n    while (k < kl) {\r\n      const x = Math.random() - 0.5\r\n      const y = Math.random() - 0.5\r\n      const z = Math.random() - 0.5\r\n      theArray[k + 0] = x * 10\r\n      theArray[k + 1] = y * 10\r\n      theArray[k + 2] = z * 10\r\n      theArray[k + 3] = 1\r\n      result.push(k += 4)\r\n    }\r\n    return result\r\n  })()\r\n}\r\n\r\nclass Birds extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.defaultOptions = {\r\n      // Beige: 0xf8e8d0, 0xf50000, 0xcfcf1d\r\n      backgroundColor: 0x07192F, // 0x202428\r\n      color1: 0xff0000, // 0xf50000 # 0xfa9898\r\n      color2: 0x00d1ff, // 0xcfcf1d # 0x8c4646\r\n      colorMode: 'varianceGradient',\r\n      birdSize: 1,\r\n      wingSpan: 30,\r\n      speedLimit: 5,\r\n      separation: 20,\r\n      alignment: 20,\r\n      cohesion: 20,\r\n      quantity: 5, // range from 2 to 5\r\n    }\r\n  }\r\n\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  initComputeRenderer() {\r\n    this.gpuCompute = new GPUComputationRenderer(WIDTH, WIDTH, this.renderer, THREE)\r\n    const dtPosition = this.gpuCompute.createTexture()\r\n    const dtVelocity = this.gpuCompute.createTexture()\r\n    fillPositionTexture(dtPosition)\r\n    fillVelocityTexture(dtVelocity)\r\n    this.velocityVariable = this.gpuCompute.addVariable('textureVelocity', fragmentShaderVelocity, dtVelocity)\r\n    this.positionVariable = this.gpuCompute.addVariable('texturePosition', fragmentShaderPosition, dtPosition)\r\n    this.gpuCompute.setVariableDependencies(this.velocityVariable, [\r\n      this.positionVariable,\r\n      this.velocityVariable\r\n    ])\r\n    this.gpuCompute.setVariableDependencies(this.positionVariable, [\r\n      this.positionVariable,\r\n      this.velocityVariable\r\n    ])\r\n    this.positionUniforms = this.positionVariable.material.uniforms\r\n    this.velocityUniforms = this.velocityVariable.material.uniforms\r\n    this.positionUniforms.time = {value: 0.0}\r\n    this.positionUniforms.delta = {value: 0.0}\r\n    this.velocityUniforms.time = {value: 1.0}\r\n    this.velocityUniforms.delta = {value: 0.0}\r\n    this.velocityUniforms.testing = {value: 1.0}\r\n    this.velocityUniforms.separationDistance = {value: 1.0}\r\n    this.velocityUniforms.alignmentDistance = {value: 1.0}\r\n    this.velocityUniforms.cohesionDistance = {value: 1.0}\r\n    this.velocityUniforms.speedLimit = {value: 1.0}\r\n    this.velocityUniforms.freedomFactor = {value: 1.0}\r\n    this.velocityUniforms.predator = {value: new THREE.Vector3}\r\n    this.velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed(2)\r\n    this.velocityVariable.wrapS = THREE.RepeatWrapping\r\n    this.velocityVariable.wrapT = THREE.RepeatWrapping\r\n    this.positionVariable.wrapS = THREE.RepeatWrapping\r\n    this.positionVariable.wrapT = THREE.RepeatWrapping\r\n    const error = this.gpuCompute.init()\r\n    if (error !== null) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  initGpgpuBirds() {\r\n    const optionsWithEffect = Object.assign({}, this.options, {effect:this})\r\n    const geometry = getNewBirdGeometry(optionsWithEffect)\r\n    // For Vertex and Fragment\r\n    this.birdUniforms = {\r\n      color: { value: new THREE.Color(0xff2200) },\r\n      texturePosition: { value: null },\r\n      textureVelocity: { value: null },\r\n      time: { value: 1.0 },\r\n      delta: { value: 0.0 },\r\n      birdSize: {value: this.options.birdSize}\r\n    }\r\n    // ShaderMaterial\r\n    const material = new THREE.ShaderMaterial({\r\n      uniforms: this.birdUniforms,\r\n      vertexShader: birdVS,\r\n      fragmentShader: birdFS,\r\n      side: THREE.DoubleSide\r\n    });\r\n    const birdMesh = new THREE.Mesh(geometry, material)\r\n    birdMesh.rotation.y = Math.PI / 2\r\n    birdMesh.matrixAutoUpdate = false\r\n    birdMesh.updateMatrix()\r\n    return this.scene.add(birdMesh)\r\n  }\r\n\r\n  getNewCol(order) {\r\n    const options = this.options\r\n    const color1 = options.color1 != null ? options.color1 : 0x440000\r\n    const color2 = options.color2 != null ? options.color2 : 0x660000\r\n    const c1 = new THREE.Color(color1)\r\n    const c2 = new THREE.Color(color2)\r\n    const gradient = options.colorMode.indexOf('Gradient') != -1\r\n    let c, dist\r\n    if (gradient) {\r\n      // each vertex has a different color\r\n      dist = Math.random()\r\n    } else {\r\n      // each vertex has the same color\r\n      dist = order\r\n    }\r\n\r\n    if (options.colorMode.indexOf('variance') == 0) {\r\n      const r2 = (c1.r + Math.random() * c2.r).clamp(0,1)\r\n      const g2 = (c1.g + Math.random() * c2.g).clamp(0,1)\r\n      const b2 = (c1.b + Math.random() * c2.b).clamp(0,1)\r\n      c = new THREE.Color(r2, g2, b2)\r\n    } else if (options.colorMode.indexOf('mix') == 0) {\r\n      // Naive color arithmetic\r\n      c = new THREE.Color(color1 + dist * color2)\r\n    } else {\r\n      // Linear interpolation\r\n      c = c1.lerp(c2, dist)\r\n    }\r\n    return c\r\n  }\r\n\r\n  onInit() {\r\n    this.camera = new THREE.PerspectiveCamera( 75, this.width / this.height, 1, 3000 )\r\n    this.camera.position.z = 350\r\n    this.fog = new THREE.Fog( 0xffffff, 100, 1000 )\r\n    this.mouseX = (this.mouseY = 0)\r\n\r\n    const birds = this.birds = []\r\n\t\tconst boids = this.boids = []\r\n    const options = this.options\r\n    let boid, bird\r\n\r\n    if (GPGPU) {\r\n      try {\r\n        this.initComputeRenderer()\r\n        this.valuesChanger = this.valuesChanger.bind(this)\r\n        this.valuesChanger()\r\n        this.initGpgpuBirds()\r\n      } catch (err) {\r\n        console.error('[vanta.js] birds init error: ', err)\r\n      }\r\n    } else {\r\n      const numBirds = 6 * Math.pow(2, options.quantity)\r\n      for (var i = 0; i < numBirds; i++) {\r\n        boid = boids[i] = new Boid(options)\r\n        boid.position.x = Math.random() * 400 - 200\r\n        boid.position.y = Math.random() * 400 - 200\r\n        boid.position.z = Math.random() * 400 - 200\r\n        boid.velocity.x = Math.random() * 2 - 1\r\n        boid.velocity.y = Math.random() * 2 - 1\r\n        boid.velocity.z = Math.random() * 2 - 1\r\n        boid.setWorldSize( 500, 500, 300 )\r\n\r\n        const gradient = options.colorMode.indexOf('Gradient') != -1\r\n\r\n        const newBirdGeo = getNewBirdGeometryBasic(options)\r\n        const numV = newBirdGeo.attributes.position.length\r\n        const birdColors = new THREE.BufferAttribute(new Float32Array(numV), 3)\r\n        if (gradient) {\r\n          for (var j=0; j<newBirdGeo.index.array.length; j+=3) {\r\n            for (var k=0; k<=2; k++) {\r\n              const index = newBirdGeo.index.array[j+k]\r\n              const newColor = this.getNewCol()\r\n              birdColors.array[index*3] = newColor.r\r\n              birdColors.array[index*3+1] = newColor.g\r\n              birdColors.array[index*3+2] = newColor.b\r\n            }\r\n          }\r\n        } else {\r\n          const newColor = this.getNewCol(i/numBirds)\r\n          for (var j=0; j<birdColors.array.length; j+=3) {\r\n            birdColors.array[j] = newColor.r\r\n            birdColors.array[j+1] = newColor.g\r\n            birdColors.array[j+2] = newColor.b\r\n          }\r\n        }\r\n        newBirdGeo.setAttribute('color', birdColors)\r\n\r\n        bird = birds[i] = new THREE.Mesh(\r\n          newBirdGeo,\r\n          new THREE.MeshBasicMaterial( {\r\n            color: 0xffffff,\r\n            side: THREE.DoubleSide,\r\n            // colors: THREE.VertexColors,\r\n\t\t\t\t\t  vertexColors: THREE.VertexColors,\r\n          }))\r\n        bird.phase = Math.floor( Math.random() * 62.83 )\r\n        bird.position.x = boids[i].position.x\r\n        bird.position.y = boids[i].position.y\r\n        bird.position.z = boids[i].position.z\r\n        this.scene.add( bird )\r\n        // if (i == 0) {\r\n        //   window.bird = bird; window.boid = boid;\r\n        // }\r\n      }\r\n    }\r\n  }\r\n\r\n  valuesChanger() {\r\n    if (this.velocityUniforms) {\r\n      this.velocityUniforms.separationDistance.value = this.options.separation\r\n      this.velocityUniforms.alignmentDistance.value = this.options.alignment\r\n      this.velocityUniforms.speedLimit.value = this.options.speedLimit\r\n      this.velocityUniforms.cohesionDistance.value = this.options.cohesion\r\n    }\r\n  }\r\n\r\n  onUpdate() {\r\n    this.now = performance.now()\r\n    if (!this.last) { this.last = this.now }\r\n    let delta = (this.now - this.last) / 1000\r\n\r\n    if (delta > 1) { delta = 1 }\r\n    this.last = this.now\r\n\r\n    if (GPGPU) {\r\n      this.positionUniforms.time.value = this.now\r\n      this.positionUniforms.delta.value = delta\r\n      this.velocityUniforms.time.value = this.now\r\n      this.velocityUniforms.delta.value = delta\r\n      this.birdUniforms.time.value = this.now\r\n      this.birdUniforms.delta.value = delta\r\n      this.velocityUniforms.predator.value.set(\r\n        this.mouseX,\r\n        -this.mouseY,\r\n        0\r\n      )\r\n      this.mouseX = 10000\r\n      this.mouseY = 10000\r\n      this.gpuCompute.compute()\r\n      this.birdUniforms.texturePosition.value = this.gpuCompute.getCurrentRenderTarget( this.positionVariable ).texture\r\n      this.birdUniforms.textureVelocity.value = this.gpuCompute.getCurrentRenderTarget( this.velocityVariable ).texture\r\n    } else {\r\n      const birds = this.birds\r\n      const boids = this.boids\r\n      let boid, bird, color\r\n      for ( var i = 0, il = birds.length; i < il; i++ ) {\r\n        boid = boids[i]\r\n        boid.run( boids )\r\n        bird = birds[i]\r\n        // color = bird.material.color\r\n        // color.r = color.g = color.b = ( 500 - bird.position.z ) / 1000\r\n        bird.rotation.y = Math.atan2( - boid.velocity.z, boid.velocity.x )\r\n        bird.rotation.z = Math.asin( boid.velocity.y / boid.velocity.length() )\r\n        // Flapping\r\n        bird.phase = (bird.phase + (Math.max(0, bird.rotation.z)+0.1)) % 62.83\r\n\r\n        const tip1 = 5*3 + 1\r\n        const tip2 = 4*3 + 1\r\n        bird.geometry.attributes.position.array[tip1] = bird.geometry.attributes.position.array[tip2] =\r\n          Math.sin( bird.phase ) * 5 * this.options.birdSize\r\n        bird.geometry.attributes.position.needsUpdate = true\r\n        bird.geometry.computeVertexNormals()\r\n\r\n        bird.position.x = boids[i].position.x\r\n        bird.position.y = boids[i].position.y\r\n        bird.position.z = boids[i].position.z\r\n      }\r\n    }\r\n  }\r\n  onMouseMove(x,y) {\r\n    // Center on 0,0\r\n    this.mouseX = x - 0.5\r\n    this.mouseY = y - 0.5\r\n    if (!GPGPU) {\r\n      const boids = this.boids\r\n      let boid\r\n      var vector = new THREE.Vector3( this.mouseX * this.width, -this.mouseY * this.height, 0 );\r\n      for ( var i = 0, il = boids.length; i < il; i++ ) {\r\n        boid = boids[i]\r\n        vector.z = boid.position.z\r\n        boid.repulse( vector )\r\n\t\t\t}\r\n    }\r\n  }\r\n  onDestroy() {}\r\n  onResize() {}\r\n}\r\nBirds.initClass()\r\nexport default VANTA.register('BIRDS', Birds)","<template>\r\n  <div class=\"five\">\r\n    <div ref=\"vantaRef\" style=\"width: 100%; height: 100vh\"></div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"less\">\r\n.five {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n</style>\r\n<script>\r\nimport * as THREE from 'three'//导入样式\r\nimport BIRDS from 'vanta/src/vanta.birds'//导入动态样式逻辑\r\nexport default {\r\n  data() {\r\n    return {};\r\n  }\r\n  ,\r\n  mounted() {\r\n    this.vantaEffect = BIRDS({\r\n      el: this.$refs.vantaRef,\r\n      THREE: THREE\r\n    })\r\n    // 修改颜色时 cells 需要全大写字母 可生效\r\n    VANTA.BIRDS({\r\n      el: this.$refs.vantaRef,\r\n      mouseControls: true,\r\n      touchControls: true,\r\n      gyroControls: false,\r\n      minHeight: 200.00,\r\n      minWidth: 200.00,\r\n      scale: 1.00,\r\n      scaleMobile: 1.00,\r\n      quantity: 4.00\r\n    });\r\n  }\r\n  ,\r\n  beforeDestroy() {\r\n    if (this.vantaEffect) {\r\n      this.vantaEffect.destroy()\r\n    }\r\n  }\r\n}\r\n</script>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Five.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Five.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Five.vue?vue&type=template&id=0e8541ed&scoped=true\"\nimport script from \"./Five.vue?vue&type=script&lang=js\"\nexport * from \"./Five.vue?vue&type=script&lang=js\"\nimport style0 from \"./Five.vue?vue&type=style&index=0&id=0e8541ed&prod&scoped=true&lang=less\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0e8541ed\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","ref","staticStyle","staticRenderFns","win","window","THREE","Camera","ClampToEdgeWrapping","DataTexture","FloatType","Mesh","NearestFilter","PlaneBufferGeometry","RGBAFormat","Scene","ShaderMaterial","WebGLRenderTarget","GPUComputationRenderer","sizeX","sizeY","renderer","userTHREE","variables","currentTextureIndex","dataType","scene","camera","position","z","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","getPassThroughFragmentShader","mesh","addResolutionDefine","materialShader","defines","resolution","toFixed","computeFragmentShader","uniforms","material","vertexShader","getPassThroughVertexShader","fragmentShader","add","setDataType","type","addVariable","variableName","initialValueTexture","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","get","maxVertexTextures","i","length","createRenderTarget","renderTexture","d","depVar","found","j","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","renderTarget","format","stencilBuffer","depthBuffer","createTexture","data","Float32Array","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","GPGPU","mobileCheck","WIDTH","BIRDS","BOUNDS","BOUNDS_HALF","getNewBirdGeometry","options","scope","BufferGeometry","quantity","Math","pow","triangles","points","vertices","BufferAttribute","birdColors","references","birdVertex","setAttribute","addAttribute","v","verts_push","arguments","array","wingSpan","s","birdSize","f","colorCache","x","y","order","key","toString","gradient","colorMode","indexOf","c","effect","getNewCol","r","g","b","scale","getNewBirdGeometryBasic","Vector3","setFromPoints","indices","setIndex","Boid","constructor","_acceleration","_goal","vector","_width","_height","_depth","_neighborhoodRadius","_maxSpeed","_maxSteerForce","_avoidWalls","_options","velocity","setGoal","target","setWorldSize","width","height","depth","run","boids","set","avoid","multiplyScalar","random","flock","move","reach","alignment","cohesion","separation","l","divideScalar","checkBounds","steer","copy","sub","distanceToSquared","repulse","distance","distanceTo","subVectors","amount","boid","velSum","count","radius","posSum","normalize","fragmentShaderPosition","fragmentShaderVelocity","birdVS","birdFS","fillPositionTexture","theArray","image","k","kl","result","fillVelocityTexture","Birds","VantaBase","initClass","prototype","defaultOptions","backgroundColor","color1","color2","speedLimit","userOptions","super","initComputeRenderer","gpuCompute","dtPosition","dtVelocity","velocityVariable","positionVariable","positionUniforms","velocityUniforms","time","delta","testing","separationDistance","alignmentDistance","cohesionDistance","freedomFactor","predator","RepeatWrapping","error","console","initGpgpuBirds","optionsWithEffect","Object","assign","geometry","birdUniforms","color","Color","texturePosition","textureVelocity","side","DoubleSide","birdMesh","rotation","PI","matrixAutoUpdate","updateMatrix","c1","c2","dist","r2","clamp","g2","b2","lerp","onInit","PerspectiveCamera","fog","Fog","mouseX","mouseY","birds","bird","valuesChanger","bind","err","numBirds","newBirdGeo","numV","attributes","index","newColor","MeshBasicMaterial","vertexColors","VertexColors","phase","floor","onUpdate","now","performance","last","atan2","asin","max","tip1","tip2","sin","needsUpdate","computeVertexNormals","onMouseMove","onDestroy","onResize","VANTA","register","mounted","vantaEffect","el","$refs","vantaRef","mouseControls","touchControls","gyroControls","minHeight","minWidth","scaleMobile","beforeDestroy","destroy","component"],"sourceRoot":""}